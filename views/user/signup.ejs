<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Signup</title>
    <link rel="stylesheet" href="home.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />

  </head>

    <body class="bg-gray-100">
      <%- include("../partials/user/navbar") %>

      <div class="mt-28 flex items-center justify-center my-16">
        <div class="w-full max-w-md p-8 bg-white shadow-lg rounded-2xl border border-black/20">
          <h2 class="text-2xl font-semibold text-center mb-6">Signup</h2>

          <form action="/user/signup" method="post" id="signup-form" class="space-y-4" onsubmit="handleSignup(event)">
            <div>
              <input type="text" name="fullName" placeholder="Full Name" id="fullName" class="w-full p-3 rounded-lg bg-gray-300 text-slate-800 focus:ring-2 focus:ring-blue-500" required>
              <div id="fullName-error" class="error-text text-red-500"></div>
            </div>
            
            <div>
              <input type="email" name="email" placeholder="Email" id="email" class="w-full p-3 rounded-lg bg-gray-300 text-slate-800 focus:ring-2 focus:ring-blue-500" required>
              <div id="email-error" class="error-text text-red-500"></div>
            </div>
            
            <div>
              <input type="tel" name="phone" placeholder="Phone Number" id="phone" class="w-full p-3 rounded-lg bg-gray-300 text-slate-800 focus:ring-2 focus:ring-blue-500" required>
              <div id="phone-error" class="error-text text-red-500"></div>
            </div>
            
            <div class="relative">
              <input type="password" name="password" placeholder="Password" id="password" class="w-full p-3 rounded-lg bg-gray-300 text-gray-900 focus:ring-2 focus:ring-blue-500" required>
              <button type="button" class="absolute right-3 top-3" onclick="togglePasswordVisibility('password')">
                <i class="fa-regular fa-eye"></i>
              </button>
              <div id="password-error" class="error-text text-red-500"></div>
            </div>
            
            <div class="relative">
              <input type="password" name="confirmPassword" placeholder="Confirm Password" id="confirmPassword" class="w-full p-3 rounded-lg bg-gray-300 text-gray-900 focus:ring-2 focus:ring-blue-500" required>
              <button type="button" class="absolute right-3 top-3" onclick="togglePasswordVisibility('confirmPassword')">
                <i class="fa-regular fa-eye"></i>
              </button>
              <div id="confirmPassword-error" class="error-text text-red-500"></div>
            </div>

            <div class="flex justify-between text-sm text-gray-500">
              <a href="/user/signin" class="hover:underline">Login</a>
            </div>

            <div>
              <button type="submit" class="w-full py-3 bg-black text-white font-semibold rounded-lg hover:bg-gray-800 focus:ring-2 focus:ring-offset-2 focus:ring-gray-700">Signup</button>
            </div>

            <div id="signup-success" class="success-text text-green-500"></div>
          </form>

          <div id="google-auth-div">
            <div class="flex justify-center text-center mt-6 text-gray-500 text-sm">
              Or continue with Google
            </div>
            <a class="flex justify-center mt-6" href="/auth/google"> 
              <i class="fa-brands fa-google fa-lg" style="color: #b12020;"></i>
            </a>
          </div>
        </div>
      </div>



<!-- OTP Verification Modal -->
<div id="otp-modal" class="fixed inset-0 items-center justify-center bg-black/50" style="display: none;">
  <div class="bg-white p-6 rounded-lg shadow-lg w-96 relative">
    <h3 class="text-center text-xl font-semibold mb-4">Enter OTP</h3>
    <p class="text-center text-gray-600 mb-6">Please check your email for the OTP and enter it below.</p>
    
    <div class="flex justify-center mb-4">
      <input type="text" id="otp" class="w-full p-2 border border-gray-300 rounded-lg text-center" placeholder="Enter OTP" maxlength="6" />
    </div>

    <p id="otp-error" class="text-red-500 text-center mb-4"></p>
    <p id="timer" class="text-center text-gray-500 mb-4"></p>
    
    <div class="flex flex-col gap-4">
      <button id="verify-otp" class="w-full py-2 bg-black text-white rounded-lg" onclick="handleOTPVerification(event)">Verify OTP</button>
      <button id="resend-otp" class="w-full py-2 bg-gray-200 text-gray-700 rounded-lg" onclick="resendOTP(event)">Resend OTP</button>
    </div>

    <button class="absolute top-4 right-4 text-gray-600 hover:text-gray-800" onclick="closeOtpModal()">
      âœ–
    </button>
  </div>
</div>

<!-- Add loading indicator -->
<div id="loadingIndicator" class="hidden">
  <div class="spinner">Loading...</div>
</div>



    <%- include("../partials/user/footer") %>



    <script>
      // Individual validation functions
      function validateFullName() {
        const fullName = document.getElementById("fullName").value;
        const fullNameError = document.getElementById("fullName-error");
        if (!fullName) {
          fullNameError.textContent = "Full Name is required";
          return false;
        } else if (!/^[A-Za-z\s]+$/.test(fullName)) {
          fullNameError.textContent = "Only alphabets are allowed";
          return false;
        }
        fullNameError.textContent = "";
        return true;
      }

      function validateEmail() {
        const email = document.getElementById("email").value;
        const emailError = document.getElementById("email-error");
        if (!email) {
          emailError.textContent = "Email is required";
          return false;
        } else if (/^[0-9]/.test(email)) {
          emailError.textContent = "Email cannot start with a number";
          return false;
        } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email)) {
          emailError.textContent = "Enter a valid email address";
          return false;
        }
        emailError.textContent = "";
        return true;
      }

      function validatePhone() {
        const phone = document.getElementById("phone").value.trim();
        const phoneError = document.getElementById("phone-error");
        if (!phone) {
          phoneError.textContent = "Phone number is required";
          return false;
        } else if (!/^[6-9]\d{9}$/.test(phone)) {
          phoneError.textContent = "Please enter a valid 10-digit mobile number starting with 6-9";
          return false;
        }
        phoneError.textContent = "";
        return true;
      }

      function validatePassword() {
        const password = document.getElementById("password").value;
        const passwordError = document.getElementById("password-error");
        if (!password) {
          passwordError.textContent = "Password is required";
          return false;
        } else if (!/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&#])[A-Za-z\d@$!%*?&#]{8,16}$/.test(password)) {
          passwordError.textContent = "Password must be 8-16 characters with number, uppercase, lowercase, and special character";
          return false;
        }
        passwordError.textContent = "";
        return true;
      }

      function validateConfirmPassword() {
        const password = document.getElementById("password").value;
        const confirmPassword = document.getElementById("confirmPassword").value;
        const confirmPasswordError = document.getElementById("confirmPassword-error");
        if (!confirmPassword) {
          confirmPasswordError.textContent = "Confirm Password is required";
          return false;
        } else if (confirmPassword !== password) {
          confirmPasswordError.textContent = "Passwords do not match";
          return false;
        }
        confirmPasswordError.textContent = "";
        return true;
      }

      // Add event listeners for real-time validation
      document.getElementById("fullName").addEventListener("input", validateFullName);
      document.getElementById("email").addEventListener("input", validateEmail);
      document.getElementById("phone").addEventListener("input", validatePhone);
      document.getElementById("password").addEventListener("input", validatePassword);
      document.getElementById("confirmPassword").addEventListener("input", validateConfirmPassword);

      // Update validateForm function
      function validateForm() {
        const isFullNameValid = validateFullName();
        const isEmailValid = validateEmail();
        const isPhoneValid = validatePhone();
        const isPasswordValid = validatePassword();
        const isConfirmPasswordValid = validateConfirmPassword();

        return (
          isFullNameValid && 
          isEmailValid && 
          isPhoneValid && 
          isPasswordValid && 
          isConfirmPasswordValid
        );
      }

      // Remove individual validation functions and event listeners
      // Keep only the password visibility toggle function
      
      async function handleSignup(event) {
        event.preventDefault();
      
        if (!validateForm()) {
          return;
        }
      
        const fullName = document.getElementById("fullName").value;
        const email = document.getElementById("email").value;
        const phone = document.getElementById("phone").value;
        const password = document.getElementById("password").value;
      
        try {
          const response = await fetch("/user/signup", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ fullName, email, phone, password }),
          });
      
          // Parse the JSON response
          const data = await response.json();
      
          // Check if the response is successful
          if (response.status === 200) {
            // Display success popup and only then show OTP modal
            swal("Success!", data.message, "success").then(() => {
              showOtpModal();
              startTimer(30);
            });
          } else {
            // Display error message
            swal("Error!", data.message || "An error occurred. Please try again.", "error");
          }
        } catch (error) {
          console.error("Error during signup:", error);
          swal("Error!", "An error occurred during signup. Please try again.", "error");
        }
      }

      function showOtpModal() {
        const modal = document.getElementById("otp-modal");
        modal.style.display = "flex";
      }

      function closeOtpModal() {
        const modal = document.getElementById("otp-modal");
        modal.style.display = "none";
        clearInterval(timer);
      }

      async function resendOTP(event) {
        event.preventDefault();
        const loadingIndicator = document.getElementById("loadingIndicator");
        loadingIndicator.classList.remove("hidden");
      
        try {
          const email = document.getElementById("email").value;
          const response = await fetch("/user/resend-otp", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ email }),
          });
      
          const data = await response.json();
          loadingIndicator.classList.add("hidden");
      
          if (response.status === 200) {
            swal("", data.message, "success");
            startTimer(30);
          } else {
            document.getElementById("otp-error").textContent = data.message;
          }
        } catch (error) {
          loadingIndicator.classList.add("hidden");
          document.getElementById("otp-error").textContent =
            "An error occurred while resending OTP. Please try again.";
        }
      }

      function startTimer(duration) {
        let timeRemaining = duration;
        const timerDisplay = document.getElementById("timer");
        const resendButton = document.getElementById("resend-otp");
      
        resendButton.style.display = "none";
        console.log("timer started");
        timer = setInterval(() => {
          if (timeRemaining <= 0) {
            clearInterval(timer);
            timerDisplay.textContent = "You can now resend the OTP.";
      
            resendButton.style.display = "block";
          } else {
            timeRemaining--;
            timerDisplay.textContent = `Resend OTP in ${timeRemaining} seconds.`;
          }
        }, 1000);
      }

      async function handleOTPVerification(event) {
        event.preventDefault();
      
        const email = document.getElementById("email").value;
        const otp = document.getElementById("otp").value;
        const fullName = document.getElementById("fullName").value;
        const password = document.getElementById("password").value;
      
        try {
          const response = await fetch("/user/verify-otp", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ email, otp, fullName, password }),
          });
      
          const data = await response.json();
          if (response.status === 201) {
            swal("", data.message, "success");
      
            window.location.href = "/home";
          } else {
            document.getElementById("otp-error").textContent = data.message;
          }
        } catch (error) {
          document.getElementById("otp-error").textContent =
            "An error occurred during OTP verification. Please try again.";
        }
      }


         // ... existing validation functions ...

         function togglePasswordVisibility(inputId) {
        const passwordInput = document.getElementById(inputId);
        const eyeIcon = passwordInput.nextElementSibling.querySelector('i');
        
        if (passwordInput.type === "password") {
          passwordInput.type = "text";
          eyeIcon.classList.remove("fa-eye");
          eyeIcon.classList.add("fa-eye-slash");
        } else {
          passwordInput.type = "password";
          eyeIcon.classList.remove("fa-eye-slash");
          eyeIcon.classList.add("fa-eye");
        }
      }
    </script>
   
    </body>
</html>
