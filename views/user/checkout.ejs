<%- include("../partials/user/head", {title: "Checkout"}) %>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<body>
  <%- include("../partials/user/navbar") %>
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1 class="text-2xl font-bold mb-8">Checkout</h1>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Left Column: Addresses -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold">Delivery Address</h2>
            <button id="addNewAddressBtn" class="text-indigo-600 hover:text-indigo-800 text-sm">
              + Add New Address
            </button>
          </div>

          <div id="addressesContainer" class="space-y-4">
            <% if (addresses && addresses.length > 0) { %>
              <% addresses.forEach(address => { %>
                <div class="border rounded-lg p-4 address-card <%= address.isDefault ? 'border-indigo-500 bg-indigo-50' : 'border-gray-200' %>" data-id="<%= address._id %>">
                  <div class="flex items-start">
                    <input 
                      type="radio" 
                      name="selectedAddress" 
                      value="<%= address._id %>" 
                      class="mt-1 mr-3 address-radio"
                      <%= address.isDefault ? 'checked' : '' %>
                    >
                    <div class="flex-1">
                      <div class="flex justify-between">
                        <div>
                          <p class="font-medium"><%= address.name %></p>
                          <p class="text-sm text-gray-600"><%= address.mobile %></p>
                        </div>
                        <div class="flex space-x-2">
                          <button class="text-gray-500 hover:text-gray-700 edit-address" data-id="<%= address._id %>">
                            <i class="fas fa-edit"></i>
                          </button>
                          <% if (!address.isDefault) { %>
                            <button class="text-red-500 hover:text-red-700 delete-address" data-id="<%= address._id %>">
                              <i class="fas fa-trash"></i>
                            </button>
                          <% } %>
                        </div>
                      </div>
                      <p class="text-sm mt-2">
                        <%= address.address %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %>
                      </p>
                      <% if (address.isDefault) { %>
                        <span class="inline-block mt-2 text-xs bg-indigo-100 text-indigo-800 px-2 py-1 rounded">Default</span>
                      <% } else { %>
                        <button class="make-default text-xs text-indigo-600 hover:text-indigo-800 mt-2" data-id="<%= address._id %>">
                          Make Default
                        </button>
                      <% } %>
                    </div>
                  </div>
                </div>
              <% }); %>
            <% } else { %>
              <div class="text-center py-8 text-gray-500">
                <p>No addresses found. Please add a new address.</p>
              </div>
            <% } %>
          </div>
        </div>

        <!-- Payment Methods -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-lg font-semibold mb-4">Payment Method</h2>
          
          <div class="space-y-3">
            <label class="flex items-center p-3 border rounded-lg cursor-pointer">
              <input type="radio" name="paymentMethod" value="cod" checked class="mr-3">
              <div>
                <p class="font-medium">Cash on Delivery</p>
                <p class="text-sm text-gray-600">Pay when your order is delivered</p>
              </div>
            </label>
            
            <label class="flex items-center p-3 border rounded-lg cursor-pointer">
              <input type="radio" name="paymentMethod" value="online" class="mr-3">
              <div>
                <p class="font-medium">Online Payment</p>
                <p class="text-sm text-gray-600">Pay securely with Razorpay</p>
                <div class="mt-2 flex space-x-2">
                  <img src="/images/razorpay-logo.png" alt="Razorpay" class="h-6" onerror="this.src='https://razorpay.com/assets/razorpay-logo.svg'; this.onerror='';">
                  <img src="/images/visa.png" alt="Visa" class="h-6" onerror="this.src='https://cdn.iconscout.com/icon/free/png-256/visa-3-226460.png'; this.onerror='';">
                  <img src="/images/mastercard.png" alt="Mastercard" class="h-6" onerror="this.src='https://cdn.iconscout.com/icon/free/png-256/mastercard-3-226462.png'; this.onerror='';">
                </div>
              </div>
            </label>
            
            <% if (wallet && wallet.balance > 0) { %>
              <label class="flex items-center p-3 border rounded-lg cursor-pointer">
                <input type="radio" name="paymentMethod" value="wallet" class="mr-3" 
                  <%= (wallet && wallet.balance >= cartTotal) ? '' : 'disabled' %>>
                <div>
                  <p class="font-medium">Wallet Balance (₹<%= wallet ? wallet.balance.toFixed(2) : '0.00' %>)</p>
                  <% if (wallet.balance < cartTotal) { %>
                    <p class="text-red-500 text-sm mt-1">Insufficient balance</p>
                  <% } %>
                </div>
              </label>
            <% } %>
          </div>
        </div>
      </div>

      <!-- Right Column: Order Summary -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-md p-6 sticky top-4">
          <h2 class="text-lg font-semibold mb-4">Order Summary</h2>
          
          <div class="space-y-4 mb-4">
            <% cart.items.forEach(item => { %>
              <div class="flex items-center pb-4 border-b">
                <div class="w-16 h-16 mr-4">
                  <img 
                    src="<%= item.product.imageUrl && item.product.imageUrl.length > 0 ? item.product.imageUrl[0] : '/images/placeholder.jpg' %>" 
                    alt="<%= item.product.productName %>" 
                    class="w-full h-full object-cover rounded"
                  >
                </div>
                <div class="flex-1">
                  <p class="font-medium"><%= item.product.productName %></p>
                  <p class="text-sm text-gray-600">
                    <% if (item.variant.variantType) { %>Variant: <%= item.variant.variantType %><% } %>
                    | Qty: <%= item.quantity %>
                  </p>
                </div>
                <div class="text-right">
                  <% if (item.variant.discountPrice && item.variant.discountPrice > 0) { %>
                    <p class="font-medium">₹<%= (item.variant.discountPrice * item.quantity).toFixed(2) %></p>
                    <p class="text-xs text-gray-500 line-through">₹<%= (item.price * item.quantity).toFixed(2) %></p>
                  <% } else { %>
                    <p class="font-medium">₹<%= (item.price * item.quantity).toFixed(2) %></p>
                  <% } %>
                </div>
              </div>
            <% }); %>
          </div>
          
          <div class="space-y-2 py-4 border-b">
            <div class="flex justify-between">
              <p class="text-gray-600">Subtotal</p>
              <p class="font-medium">₹<%= cartTotal.toFixed(2) %></p>
            </div>
            <div class="flex justify-between">
              <p class="text-gray-600">Shipping</p>
              <p class="font-medium">₹<%= shipping.toFixed(2) %></p>
            </div>
            <% if (discount > 0) { %>
              <div class="flex justify-between text-green-600">
                <p>Discount</p>
                <p>-₹<%= discount.toFixed(2) %></p>
              </div>
            <% } %>
          </div>
          
          <!-- Add this in your price summary section -->
          <div class="mt-4">
            <div class="flex items-center space-x-2">
              <input type="text" id="couponCode" class="form-input rounded-md" placeholder="Enter coupon code">
              <button id="applyCoupon" class="px-4 py-2 bg-blue-500 text-white rounded-md">Apply</button>
            </div>
            
            <% if (appliedCoupon) { %>
              <div class="flex justify-between items-center mt-2">
                <div class="flex items-center">
                  <span class="text-green-500 font-medium"><%= appliedCoupon.code %></span>
                  <button id="removeCoupon" class="ml-2 text-red-500">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                <span>-₹<%= couponDiscount.toFixed(2) %></span>
              </div>
            <% } %>
          </div>
          
          <!-- Total -->
          <div class="flex justify-between py-4 font-bold text-lg">
            <p>Total</p>
            <p>₹<%= (cartTotal + shipping - discount).toFixed(2) %></p>
          </div>
          
          <!-- Place Order Button -->
          <button id="placeOrderBtn" class="w-full bg-indigo-600 text-white py-3 rounded-lg font-bold mt-4 hover:bg-indigo-700 transition-colors duration-200">
            Place Order
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Address Modal -->
  <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 id="addressModalTitle" class="text-lg font-semibold">Add New Address</h3>
        <button id="closeAddressModal" class="text-gray-500 hover:text-gray-700">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <form id="addressForm">
        <input type="hidden" id="addressId" name="addressId">
        
        <div class="mb-4">
          <label for="name" class="block text-gray-700 mb-1">Full Name</label>
          <input 
            type="text" 
            id="name" 
            name="fullName"
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          >
        </div>
        
        <div class="mb-4">
          <label for="mobile" class="block text-gray-700 mb-1">Mobile Number</label>
          <input 
            type="tel" 
            id="mobile" 
            name="mobile" 
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          >
        </div>
        
        <div class="mb-4">
          <label for="address" class="block text-gray-700 mb-1">Address</label>
          <textarea 
            id="address" 
            name="address" 
            rows="2"
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          ></textarea>
        </div>
        
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label for="city" class="block text-gray-700 mb-1">City</label>
            <input 
              type="text" 
              id="city" 
              name="city" 
              class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            >
          </div>
          <div>
            <label for="state" class="block text-gray-700 mb-1">State</label>
            <input 
              type="text" 
              id="state" 
              name="state" 
              class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            >
          </div>
        </div>
        
        <div class="mb-4">
          <label for="pincode" class="block text-gray-700 mb-1">Pincode</label>
          <input 
            type="text" 
            id="pincode" 
            name="pincode" 
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          >
        </div>
        
        <div class="mb-4">
          <label class="flex items-center">
            <input type="checkbox" id="isDefault" name="isDefault" class="mr-2">
            <span>Set as default address</span>
          </label>
        </div>
        
        <div class="flex justify-end space-x-3">
          <button 
            type="button"
            id="cancelAddressBtn"
            class="px-4 py-2 border rounded-lg text-gray-700 hover:bg-gray-100"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            Save Address
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Update your existing script for placing orders -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const addressModal = document.getElementById('addressModal');
      const addressForm = document.getElementById('addressForm');
      const addNewAddressBtn = document.getElementById('addNewAddressBtn');
      const closeAddressModal = document.getElementById('closeAddressModal');
      const cancelAddressBtn = document.getElementById('cancelAddressBtn');
      const addressModalTitle = document.getElementById('addressModalTitle');
      
      // Make address cards clickable to select the radio button
      document.querySelectorAll('.address-card').forEach(card => {
        card.addEventListener('click', function(e) {
          // Don't trigger if clicking on buttons
          if (e.target.closest('button')) return;
          
          const radio = this.querySelector('input[type="radio"]');
          radio.checked = true;
          
          // Update UI for all cards
          document.querySelectorAll('.address-card').forEach(c => {
            c.classList.remove('border-indigo-500', 'bg-indigo-50');
            c.classList.add('border-gray-200');
          });
          
          // Highlight selected card
          this.classList.remove('border-gray-200');
          this.classList.add('border-indigo-500', 'bg-indigo-50');
        });
      });
      
      // Open address modal for new address
      addNewAddressBtn.addEventListener('click', function() {
        addressForm.reset();
        document.getElementById('addressId').value = '';
        addressModalTitle.textContent = 'Add New Address';
        addressModal.classList.remove('hidden');
      });
      
      // Close address modal
      function closeModal() {
        addressModal.classList.add('hidden');
      }
      
      closeAddressModal.addEventListener('click', closeModal);
      cancelAddressBtn.addEventListener('click', closeModal);
      
      // Edit address
      document.querySelectorAll('.edit-address').forEach(button => {
        button.addEventListener('click', async function() {
          const addressId = this.getAttribute('data-id');
          try {
            const response = await fetch(`/address/${addressId}`);
            if (response.ok) {
              const address = await response.json();
              
              // Fill form with address data
              document.getElementById('addressId').value = address._id;
              document.getElementById('name').value = address.fullName;
              document.getElementById('mobile').value = address.mobile;
              document.getElementById('address').value = address.address;
              document.getElementById('city').value = address.city;
              document.getElementById('state').value = address.state;
              document.getElementById('pincode').value = address.pincode;
              document.getElementById('isDefault').checked = address.isDefault;
              
              // Update modal title and show
              addressModalTitle.textContent = 'Edit Address';
              addressModal.classList.remove('hidden');
            }
          } catch (error) {
            console.error('Error fetching address:', error);
          }
        });
      });
      
      // Delete address
      document.querySelectorAll('.delete-address').forEach(button => {
        button.addEventListener('click', async function() {
          if (confirm('Are you sure you want to delete this address?')) {
            const addressId = this.getAttribute('data-id');
            try {
              const response = await fetch(`/address/${addressId}`, {
                method: 'DELETE'
              });
              
              if (response.ok) {
                window.location.reload();
              }
            } catch (error) {
              console.error('Error deleting address:', error);
            }
          }
        });
      });
      
      // Make address default
      document.querySelectorAll('.make-default').forEach(button => {
        button.addEventListener('click', async function() {
          const addressId = this.getAttribute('data-id');
          try {
            const response = await fetch(`/address/${addressId}/default`, {
              method: 'PUT'
            });
            
            if (response.ok) {
              window.location.reload();
            }
          } catch (error) {
            console.error('Error setting default address:', error);
          }
        });
      });
      
      // Save address form
      addressForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(addressForm);
        const addressData = {
          name: formData.get('fullName'),
          mobile: formData.get('mobile'),
          address: formData.get('address'),
          city: formData.get('city'),
          state: formData.get('state'),
          pincode: formData.get('pincode'),
          isDefault: formData.get('isDefault') === 'on'
        };
        
        const addressId = formData.get('addressId');
        const url = addressId ? `/address/${addressId}` : '/address';
        const method = addressId ? 'PUT' : 'POST';
        
        try {
          const response = await fetch(url, {
            method,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressData)
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const error = await response.json();
            alert(error.error || 'Failed to save address');
          }
        } catch (error) {
          console.error('Error saving address:', error);
          alert('An error occurred while saving your address');
        }
      });
      
      // Place order
      document.getElementById('placeOrderBtn').addEventListener('click', async function() {
        const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
        
        if (!selectedAddressRadio) {
          Swal.fire({
            title: 'Error',
            text: 'Please select a delivery address',
            icon: 'error',
            confirmButtonText: 'OK'
          });
          return;
        }
        
        const addressId = selectedAddressRadio.value;
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
        
        try {
          // Show loading
          document.getElementById('placeOrderBtn').disabled = true;
          document.getElementById('placeOrderBtn').innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
          
          const response = await fetch('/order/place', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              addressId,
              paymentMethod
            })
          });
          
          const result = await response.json();
          
          if (response.ok) {
            if (result.paymentMethod === 'cod') {
              window.location.href = `/order/success/${result.orderId}`;
            } 
            else if (result.paymentMethod === 'online') {
              const options = {
                key: result.key_id,
                amount: result.amount,
                currency: result.currency,
                name: 'Your Store Name',
                description: 'Order Payment',
                order_id: result.razorpayOrderId,
                handler: async function(response) {
                  try {
                    const verifyResponse = await fetch('/order/verify-payment', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        orderId: result.orderId,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature
                      })
                    });
                    
                    if (verifyResponse.ok) {
                      window.location.href = `/order/success/${result.orderId}`;
                    } else {
                      throw new Error('Payment verification failed');
                    }
                  } catch (error) {
                    console.error('Payment verification error:', error);
                    window.location.href = `/order/failure/${result.orderId}`;
                  }
                },
                prefill: {
                  name: '<%= user.name %>',
                  email: '<%= user.email %>',
                  contact: '<%= user.mobile || "" %>'
                },
                theme: {
                  color: '#3399cc'
                },
                modal: {
                  ondismiss: async function() {
                    try {
                      await fetch('/order/payment-failure', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          orderId: result.orderId
                        })
                      });
                      
                      Swal.fire({
                        title: 'Payment Cancelled',
                        text: 'Your payment was cancelled. You can try again from your orders page.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                      }).then(() => {
                        window.location.href = '/orders';
                      });
                    } catch (error) {
                      console.error('Error handling payment cancellation:', error);
                    }
                  }
                }
              };
              
              const razorpayCheckout = new Razorpay(options);
              razorpayCheckout.open();
            } 
            else if (result.paymentMethod === 'wallet') {
              try {
                Swal.fire({
                  title: 'Processing Payment',
                  text: 'Please wait while we process your payment...',
                  allowOutsideClick: false,
                  didOpen: () => {
                    Swal.showLoading();
                  }
                });
                
                // Wait for a moment to ensure the order is processed
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                const response = await fetch(`/order/success/${result.orderId}`);
                if (response.ok) {
                  Swal.fire({
                    title: 'Success!',
                    text: 'Payment completed successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                  }).then(() => {
                    window.location.href = `/order/success/${result.orderId}`;
                  });
                } else {
                  throw new Error('Failed to process wallet payment');
                }
              } catch (error) {
                console.error('Wallet payment error:', error);
                Swal.fire({
                  title: 'Error',
                  text: 'Failed to process wallet payment. Please try again.',
                  icon: 'error',
                  confirmButtonText: 'OK'
                });
              }
            }
          } else {
            throw new Error(result.error || 'Failed to place order');
          }
        } catch (error) {
          console.error('Error placing order:', error);
          Swal.fire({
            title: 'Error',
            text: error.message || 'An error occurred while placing your order',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        } finally {
          // Reset button
          document.getElementById('placeOrderBtn').disabled = false;
          document.getElementById('placeOrderBtn').innerHTML = 'Place Order';
        }
      });
    });

    document.getElementById('applyCoupon').addEventListener('click', async () => {
      const couponCode = document.getElementById('couponCode').value;
      
      try {
        const response = await fetch('/checkout/apply-coupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ couponCode })
        });
        
        const result = await response.json();
        
        if (response.ok) {
          // Refresh page to show updated prices
          location.reload();
        } else {
          Swal.fire({
            title: 'Error',
            text: result.error,
            icon: 'error'
          });
        }
      } catch (error) {
        console.error('Error applying coupon:', error);
      }
    });

    document.getElementById('removeCoupon')?.addEventListener('click', async () => {
      try {
        const response = await fetch('/checkout/remove-coupon', {
          method: 'POST'
        });
        
        if (response.ok) {
          location.reload();
        }
      } catch (error) {
        console.error('Error removing coupon:', error);
      }
    });
  </script>

  <%- include("../partials/user/footer") %>
</body>
</html> 