<%- include("../partials/user/head", {title: "Checkout"}) %>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<body>
  <%- include("../partials/user/navbar") %>
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1 class="text-2xl font-bold mb-8">Checkout</h1>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Left Column: Addresses -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold">Delivery Address</h2>
            <button id="addNewAddressBtn" class="text-indigo-600 hover:text-indigo-800 text-sm">
              + Add New Address
            </button>
          </div>

          <div id="addressesContainer" class="space-y-4">
            <% if (addresses && addresses.length > 0) { %>
              <% addresses.forEach(address => { %>
                <div class="border rounded-lg p-4 address-card <%= address.isDefault ? 'border-indigo-500 bg-indigo-50' : 'border-gray-200' %>" data-id="<%= address._id %>">
                  <div class="flex items-start">
                    <input 
                      type="radio" 
                      name="selectedAddress" 
                      value="<%= address._id %>" 
                      class="mt-1 mr-3 address-radio"
                      <%= address.isDefault ? 'checked' : '' %>
                    >
                    <div class="flex-1">
                      <div class="flex justify-between">
                        <div>
                          <p class="font-medium"><%= address.name %></p>
                          <p class="text-sm text-gray-600"><%= address.mobile %></p>
                        </div>
                        <div class="flex space-x-2">
                          <button class="text-gray-500 hover:text-gray-700 edit-address" data-id="<%= address._id %>">
                            <i class="fas fa-edit"></i>
                          </button>
                          <% if (!address.isDefault) { %>
                            <button class="text-red-500 hover:text-red-700 delete-address" data-id="<%= address._id %>">
                              <i class="fas fa-trash"></i>
                            </button>
                          <% } %>
                        </div>
                      </div>
                      <p class="text-sm mt-2">
                        <%= address.address %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %>
                      </p>
                      <% if (address.isDefault) { %>
                        <span class="inline-block mt-2 text-xs bg-indigo-100 text-indigo-800 px-2 py-1 rounded">Default</span>
                      <% } else { %>
                        <button class="make-default text-xs text-indigo-600 hover:text-indigo-800 mt-2" data-id="<%= address._id %>">
                          Make Default
                        </button>
                      <% } %>
                    </div>
                  </div>
                </div>
              <% }); %>
            <% } else { %>
              <div class="text-center py-8 text-gray-500">
                <p>No addresses found. Please add a new address.</p>
              </div>
            <% } %>
          </div>
        </div>

        <!-- Payment Methods -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-lg font-semibold mb-4">Payment Method</h2>
          
          <div class="space-y-3">
            <label class="flex items-center p-3 border rounded-lg cursor-pointer <%= total > 1000 ? 'opacity-50 cursor-not-allowed' : '' %>">
              <input type="radio" name="paymentMethod" value="cod" <%= total > 1000 ? 'disabled' : 'checked' %> class="mr-3">
              <div>
                <p class="font-medium">Cash on Delivery</p>
                <p class="text-sm text-gray-600">Pay when your order is delivered</p>
                  <% if (total > 1000) { %>
                  <p class="text-sm text-red-500 mt-1">Not available for orders above ₹1000</p>
                <% } %>
              </div>
            </label>
            
            <label class="flex items-center p-3 border rounded-lg cursor-pointer">
              <input type="radio" name="paymentMethod" value="online" <%= total > 1000 ? 'checked' : '' %> class="mr-3">
              <div>
                <p class="font-medium">Online Payment</p>
                <p class="text-sm text-gray-600">Pay securely with Razorpay</p>
                <div class="mt-2 flex space-x-2">
                  <img src="https://razorpay.com/assets/razorpay-logo.svg" alt="Razorpay" class="h-6">
                  <img src="https://cdn.iconscout.com/icon/free/png-256/visa-3-226460.png" alt="Visa" class="h-6">
                  <img src="https://cdn.iconscout.com/icon/free/png-256/mastercard-3-226462.png" alt="Mastercard" class="h-6">
                </div>
              </div>
            </label>
            
            <% if (wallet && wallet.balance > 0) { %>
              <label class="flex items-center p-3 border rounded-lg cursor-pointer">
                <input type="radio" name="paymentMethod" value="wallet" class="mr-3" 
                  <%= (wallet && wallet.balance >= cartTotal) ? '' : 'disabled' %>>
                <div>
                  <p class="font-medium">Wallet Balance (₹<%= wallet ? wallet.balance.toFixed(2) : '0.00' %>)</p>
                  <% if (wallet.balance < cartTotal) { %>
                    <p class="text-red-500 text-sm mt-1">Insufficient balance</p>
                  <% } %>
                </div>
              </label>
            <% } %>
          </div>
        </div>
      </div>

      <!-- Right Column: Order Summary -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-md p-6 sticky top-4">
          <h2 class="text-lg font-semibold mb-4 pb-2 border-b">Order Summary</h2>
          
          <!-- Cart Items -->
          <div class="space-y-4 mb-4">
            <% cart.items.forEach(item => { %>
              <div class="flex items-center pb-4 border-b last:border-b-0">
                <div class="w-16 h-16 mr-4 relative rounded-lg overflow-hidden">
                  <img 
                    src="<%= item.productId.imageUrl && item.productId.imageUrl.length > 0 ? item.productId.imageUrl[0] : '/images/placeholder.jpg' %>" 
                    alt="<%= item.productId.productName %>" 
                    class="w-full h-full object-cover"
                  >
                  <span class="absolute top-0 right-0 bg-gray-800 text-white text-xs px-1.5 py-0.5 rounded">
                    <%= item.quantity %>
                  </span>
                </div>
                <div class="flex-1">
                  <p class="font-medium text-sm line-clamp-1"><%= item.productId.productName %></p>
                  <p class="text-xs text-gray-600">
                    <% if (item.variantId.variantType) { %>
                      <%= item.variantId.variantType %>
                    <% } %>
                  </p>
                  <div class="mt-1">
                    <% if (item.finalPrice < item.variantId.price) { %>
                      <span class="font-medium">₹<%= (item.finalPrice * item.quantity).toFixed(2) %></span>
                      <span class="text-xs text-gray-500 line-through ml-1">₹<%= (item.variantId.price * item.quantity).toFixed(2) %></span>
                    <% } else { %>
                      <span class="font-medium">₹<%= (item.finalPrice * item.quantity).toFixed(2) %></span>
                    <% } %>
                  </div>
                </div>
              </div>
            <% }); %>
          </div>

          <!-- Coupon Section -->
          <div class="mb-4 pb-4 border-b">
            <div class="flex items-center justify-between mb-2">
              <h3 class="font-medium text-sm">Have a coupon?</h3>
              <button id="showAvailableCoupons" class="text-indigo-600 text-sm hover:text-indigo-800">
                View Available
              </button>
            </div>
            
            <div class="flex items-center space-x-2">
              <input 
                type="text" 
                id="couponCode" 
                class="flex-1 form-input rounded-md text-sm" 
                placeholder="Enter coupon code"
                <% if (appliedCoupon) { %>value="<%= appliedCoupon.code %>" disabled<% } %>
              >
              <% if (appliedCoupon) { %>
                <button id="removeCoupon" class="px-3 py-2 bg-red-500 text-white rounded-md text-sm hover:bg-red-600 transition-colors">
                  Remove
                </button>
              <% } else { %>
                <button id="applyCoupon" class="px-4 py-2 bg-indigo-600 text-white rounded-md text-sm hover:bg-indigo-700 transition-colors">
                  Apply
                </button>
              <% } %>
            </div>

            <% if (appliedCoupon) { %>
              <div class="mt-2 text-sm text-green-600 flex items-center">
                <i class="fas fa-check-circle mr-1"></i>
                Coupon "<%= appliedCoupon.code %>" applied: -₹<%= appliedCoupon.discount.toFixed(2) %>
              </div>
            <% } %>
          </div>

          <!-- Price Breakdown -->
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-600">Subtotal</span>
              <span id="subtotal" class="font-medium">₹<%= subtotal.toFixed(2) %></span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Shipping</span>
              <span id="shipping" class="font-medium">₹<%= shipping.toFixed(2) %></span>
            </div>
            <% if (productDiscount > 0) { %>
              <div class="flex justify-between text-green-600">
                <span>Product Discount</span>
                <span id="productDiscount" class="font-medium">-₹<%= productDiscount.toFixed(2) %></span>
              </div>
            <% } %>
            <% if (couponDiscount > 0) { %>
              <div class="flex justify-between text-green-600">
                <span>Coupon Discount</span>
                <span id="couponDiscount" class="font-medium">-₹<%= couponDiscount.toFixed(2) %></span>
              </div>
            <% } %>
            
            <!-- Total -->
            <div class="flex justify-between pt-4 border-t mt-4 text-lg font-bold">
              <span>Total</span>
              <span id="total">₹<%= total.toFixed(2) %></span>
            </div>
          </div>

          <!-- Place Order Button -->
          <button 
            id="placeOrderBtn" 
            class="w-full mt-6 bg-black text-white py-3 rounded-lg font-semibold hover:bg-gray-800 transition-colors duration-200 flex items-center justify-center space-x-2"
          >
            <span>Place Order</span>
            <i class="fas fa-arrow-right"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Address Modal -->
  <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 id="addressModalTitle" class="text-lg font-semibold">Add New Address</h3>
        <button id="closeAddressModal" class="text-gray-500 hover:text-gray-700">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <form id="addressForm">
        <input type="hidden" id="addressId" name="addressId">
        
        <div class="mb-4">
          <label for="name" class="block text-gray-700 mb-1">Full Name</label>
          <input 
            type="text" 
            id="name" 
            name="fullName"
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          >
        </div>
        
        <div class="mb-4">
          <label for="mobile" class="block text-gray-700 mb-1">Mobile Number</label>
          <input 
            type="tel" 
            id="mobile" 
            name="mobile" 
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          >
        </div>
        
        <div class="mb-4">
          <label for="address" class="block text-gray-700 mb-1">Address</label>
          <textarea 
            id="address" 
            name="address" 
            rows="2"
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          ></textarea>
        </div>
        
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label for="city" class="block text-gray-700 mb-1">City</label>
            <input 
              type="text" 
              id="city" 
              name="city" 
              class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            >
          </div>
          <div>
            <label for="state" class="block text-gray-700 mb-1">State</label>
            <input 
              type="text" 
              id="state" 
              name="state" 
              class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            >
          </div>
        </div>
        
        <div class="mb-4">
          <label for="pincode" class="block text-gray-700 mb-1">Pincode</label>
          <input 
            type="text" 
            id="pincode" 
            name="pincode" 
            class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            required
          >
        </div>
        
        <div class="mb-4">
          <label class="flex items-center">
            <input type="checkbox" id="isDefault" name="isDefault" class="mr-2">
            <span>Set as default address</span>
          </label>
        </div>
        
        <div class="flex justify-end space-x-3">
          <button 
            type="button"
            id="cancelAddressBtn"
            class="px-4 py-2 border rounded-lg text-gray-700 hover:bg-gray-100"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            Save Address
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Available Coupons Modal -->
  <div id="couponsModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold">Available Coupons</h3>
        <button id="closeCouponsModal" class="text-gray-500 hover:text-gray-700">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div id="availableCoupons" class="space-y-4">
        <!-- Coupons will be loaded here -->
        <div class="text-center text-gray-500 py-4">
          Loading available coupons...
        </div>
      </div>
    </div>
  </div>

  <!-- Add this script at the end of your file -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const addressModal = document.getElementById('addressModal');
      const addressForm = document.getElementById('addressForm');
      const addNewAddressBtn = document.getElementById('addNewAddressBtn');
      const closeAddressModal = document.getElementById('closeAddressModal');
      const cancelAddressBtn = document.getElementById('cancelAddressBtn');
      const addressModalTitle = document.getElementById('addressModalTitle');
      
      // Make address cards clickable to select the radio button
      document.querySelectorAll('.address-card').forEach(card => {
        card.addEventListener('click', function(e) {
          // Don't trigger if clicking on buttons
          if (e.target.closest('button')) return;
          
          const radio = this.querySelector('input[type="radio"]');
          radio.checked = true;
          
          // Update UI for all cards
          document.querySelectorAll('.address-card').forEach(c => {
            c.classList.remove('border-indigo-500', 'bg-indigo-50');
            c.classList.add('border-gray-200');
          });
          
          // Highlight selected card
          this.classList.remove('border-gray-200');
          this.classList.add('border-indigo-500', 'bg-indigo-50');
        });
      });
      
      // Open address modal for new address
      addNewAddressBtn.addEventListener('click', function() {
        addressForm.reset();
        document.getElementById('addressId').value = '';
        addressModalTitle.textContent = 'Add New Address';
        addressModal.classList.remove('hidden');
      });
      
      // Close address modal
      function closeModal() {
        addressModal.classList.add('hidden');
      }
      
      closeAddressModal.addEventListener('click', closeModal);
      cancelAddressBtn.addEventListener('click', closeModal);
      
      // Edit address
      document.querySelectorAll('.edit-address').forEach(button => {
        button.addEventListener('click', async function() {
          const addressId = this.getAttribute('data-id');
          try {
            const response = await fetch(`/address/${addressId}`);
            if (response.ok) {
              const address = await response.json();
              
              // Fill form with address data
              document.getElementById('addressId').value = address._id;
              document.getElementById('name').value = address.fullName;
              document.getElementById('mobile').value = address.mobile;
              document.getElementById('address').value = address.address;
              document.getElementById('city').value = address.city;
              document.getElementById('state').value = address.state;
              document.getElementById('pincode').value = address.pincode;
              document.getElementById('isDefault').checked = address.isDefault;
              
              // Update modal title and show
              addressModalTitle.textContent = 'Edit Address';
              addressModal.classList.remove('hidden');
            }
          } catch (error) {
            console.error('Error fetching address:', error);
          }
        });
      });
      
      // Delete address
      document.querySelectorAll('.delete-address').forEach(button => {
        button.addEventListener('click', async function() {
          if (confirm('Are you sure you want to delete this address?')) {
            const addressId = this.getAttribute('data-id');
            try {
              const response = await fetch(`/address/${addressId}`, {
                method: 'DELETE'
              });
              
              if (response.ok) {
                window.location.reload();
              }
            } catch (error) {
              console.error('Error deleting address:', error);
            }
          }
        });
      });
      
      // Make address default
      document.querySelectorAll('.make-default').forEach(button => {
        button.addEventListener('click', async function() {
          const addressId = this.getAttribute('data-id');
          try {
            const response = await fetch(`/address/${addressId}/default`, {
              method: 'PUT'
            });
            
            if (response.ok) {
              window.location.reload();
            }
          } catch (error) {
            console.error('Error setting default address:', error);
          }
        });
      });
      
      // Save address form
      addressForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(addressForm);
        const addressData = {
          name: formData.get('fullName'),
          mobile: formData.get('mobile'),
          address: formData.get('address'),
          city: formData.get('city'),
          state: formData.get('state'),
          pincode: formData.get('pincode'),
          isDefault: formData.get('isDefault') === 'on'
        };
        
        const addressId = formData.get('addressId');
        const url = addressId ? `/address/${addressId}` : '/address';
        const method = addressId ? 'PUT' : 'POST';
        
        try {
          const response = await fetch(url, {
            method,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressData)
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const error = await response.json();
            alert(error.error || 'Failed to save address');
          }
        } catch (error) {
          console.error('Error saving address:', error);
          alert('An error occurred while saving your address');
        }
      });
      
      // Show available coupons modal
      const couponsModal = document.getElementById('couponsModal');
      const showAvailableCoupons = document.getElementById('showAvailableCoupons');
      const closeCouponsModal = document.getElementById('closeCouponsModal');
      const availableCoupons = document.getElementById('availableCoupons');

      async function loadAvailableCoupons() {
        const availableCoupons = document.getElementById('availableCoupons');
        availableCoupons.innerHTML = `
          <div class="text-center text-gray-500 py-4">
            Loading available coupons...
          </div>
        `;

        try {
          const response = await fetch('/coupons/available');
          if (!response.ok) {
            throw new Error('Failed to fetch coupons');
          }
          
          const coupons = await response.json();
          
          if (coupons.length === 0) {
            availableCoupons.innerHTML = `
              <div class="text-center text-gray-500 py-4">
                No coupons available at the moment
              </div>
            `;
            return;
          }

          availableCoupons.innerHTML = coupons.map(coupon => {
            const validUntil = new Date(coupon.validUntil);
            const isExpiringSoon = (validUntil - new Date()) < (24 * 60 * 60 * 1000); // Less than 24 hours
            
            return `
              <div class="border rounded-lg p-4 hover:border-indigo-500 transition-colors duration-200">
                <div class="flex justify-between items-start">
                  <div>
                    <h4 class="font-semibold text-lg">${coupon.code}</h4>
                    <p class="text-sm text-gray-600 mt-1">${coupon.description || ''}</p>
                  </div>
                  <button 
                    onclick="applyCouponCode('${coupon.code}')" 
                    class="text-indigo-600 hover:text-indigo-800 text-sm font-medium"
                  >
                    Apply
                  </button>
                </div>
                <div class="mt-2 text-sm">
                  <p class="text-green-600 font-medium">
                    ${coupon.discountType === 'percentage' 
                      ? `${coupon.discountAmount}% off` 
                      : `₹${coupon.discountAmount} off`}
                  </p>
                  <p class="text-gray-500 mt-1">
                    Min. Purchase: ₹${coupon.minPurchase || 0}
                    ${coupon.maxDiscount ? ` | Max Discount: ₹${coupon.maxDiscount}` : ''}
                  </p>
                  <p class="text-gray-500 mt-1 ${isExpiringSoon ? 'text-red-500' : ''}">
                    Valid till: ${validUntil.toLocaleDateString()}
                    ${isExpiringSoon ? ' (Expiring soon!)' : ''}
                  </p>
                  <p class="text-gray-500 mt-1">
                    Remaining uses: ${coupon.remainingUses}
                  </p>
                </div>
              </div>
            `;
          }).join('');
        } catch (error) {
          console.error('Error loading coupons:', error);
          availableCoupons.innerHTML = `
            <div class="text-center text-red-500 py-4">
              Failed to load coupons. Please try again.
            </div>
          `;
        }
      }

      showAvailableCoupons.addEventListener('click', () => {
        couponsModal.classList.remove('hidden');
        loadAvailableCoupons();
      });

      closeCouponsModal.addEventListener('click', () => {
        couponsModal.classList.add('hidden');
      });

      // Close modal when clicking outside
      couponsModal.addEventListener('click', (e) => {
        if (e.target === couponsModal) {
          couponsModal.classList.add('hidden');
        }
      });

      // Apply coupon function
      window.applyCouponCode = async (code) => {
        try {
          const response = await fetch('/checkout/apply-coupon', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode: code })
          });
          
          const result = await response.json();
          
          if (response.ok) {
            // Close the coupons modal
            document.getElementById('couponsModal').classList.add('hidden');
            
            Swal.fire({
              icon: 'success',
              title: 'Coupon Applied!',
              text: 'Your discount has been applied to the order.',
              showConfirmButton: false,
              timer: 1500
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: result.error || 'Failed to apply coupon',
              confirmButtonColor: '#3085d6'
            });
          }
        } catch (error) {
          console.error('Error applying coupon:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred while applying the coupon',
            confirmButtonColor: '#3085d6'
          });
        }
      };

      // Handle place order button
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      placeOrderBtn.addEventListener('click', async () => {
        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
        if (!selectedAddress) {
          Swal.fire({
            icon: 'warning',
            title: 'Select Delivery Address',
            text: 'Please select a delivery address to continue'
          });
          return;
        }

        const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
        if (!selectedPayment) {
          Swal.fire({
            icon: 'warning',
            title: 'Select Payment Method',
            text: 'Please select a payment method to continue'
          });
          return;
        }

        // Show loading state
        placeOrderBtn.disabled = true;
        placeOrderBtn.innerHTML = `
          <i class="fas fa-spinner fa-spin"></i>
          <span>Processing...</span>
        `;

        try {
          const response = await fetch('/order/place', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              addressId: selectedAddress.value,
              paymentMethod: selectedPayment.value
            })
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.error || 'Failed to place order');
          }

          if (result.paymentMethod === 'cod') {
            window.location.href = `/order/success/${result.orderId}`;
          } else if (result.paymentMethod === 'online') {
            // Handle Razorpay payment
            const options = {
              key: result.key_id,
              amount: result.amount,
              currency: result.currency,
              name: 'L.MARK',
              description: 'Order Payment',
              order_id: result.razorpayOrderId,
              modal: {
                ondismiss: async function() {
                  // Handle modal dismissal
                  try {
                    await fetch('/order/payment-failure', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        orderId: result.orderId,
                        error_code: 'MODAL_DISMISSED',
                        error_description: 'Payment cancelled by user'
                      })
                    });
                    window.location.href = `/order/failure/${result.orderId}`;
                  } catch (error) {
                    console.error('Error handling payment dismissal:', error);
                  }
                }
              },
              handler: async function(response) {
                try {
                  const verifyResponse = await fetch('/order/verify-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      orderId: result.orderId,
                      razorpay_payment_id: response.razorpay_payment_id,
                      razorpay_order_id: response.razorpay_order_id,
                      razorpay_signature: response.razorpay_signature
                    })
                  });

                  if (verifyResponse.ok) {
                    window.location.href = `/order/success/${result.orderId}`;
                  } else {
                    const errorData = await verifyResponse.json();
                    await fetch('/order/payment-failure', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        orderId: result.orderId,
                        error_code: 'VERIFICATION_FAILED',
                        error_description: errorData.error || 'Payment verification failed'
                      })
                    });
                    window.location.href = `/order/failure/${result.orderId}`;
                  }
                } catch (error) {
                  console.error('Payment verification error:', error);
                  window.location.href = `/order/failure/${result.orderId}`;
                }
              },
              prefill: {
                name: '<%= user.name %>',
                email: '<%= user.email %>',
                contact: '<%= user.mobile || "" %>'
              },
              theme: {
                color: '#000000'
              }
            };

            const razorpayCheckout = new Razorpay(options);
            razorpayCheckout.open();
          } else if (result.paymentMethod === 'wallet') {
            window.location.href = `/order/success/${result.orderId}`;
          }
        } catch (error) {
          console.error('Error placing order:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to place order'
          });
        } finally {
          // Reset button state
          placeOrderBtn.disabled = false;
          placeOrderBtn.innerHTML = `
            <span>Place Order</span>
            <i class="fas fa-arrow-right"></i>
          `;
        }
      });

      // Apply coupon handler
      const applyCouponBtn = document.getElementById('applyCoupon');
      if (applyCouponBtn) {
        applyCouponBtn.addEventListener('click', async () => {
          const couponCode = document.getElementById('couponCode').value;
          if (!couponCode) {
            Swal.fire({
              icon: 'warning',
              title: 'Enter Coupon Code',
              text: 'Please enter a coupon code to apply'
            });
            return;
          }
          
          try {
            const response = await fetch('/checkout/apply-coupon', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ couponCode })
            });
            
            const result = await response.json();
            
            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Coupon applied successfully',
                showConfirmButton: false,
                timer: 1500
              }).then(() => {
                location.reload();
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.error || 'Failed to apply coupon'
              });
            }
          } catch (error) {
            console.error('Error applying coupon:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An unexpected error occurred'
            });
          }
        });
      }

      // Remove coupon handler
      const removeCouponBtn = document.getElementById('removeCoupon');
      if (removeCouponBtn) {
        removeCouponBtn.addEventListener('click', async () => {
          try {
            const response = await fetch('/checkout/remove-coupon', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Coupon removed successfully',
                showConfirmButton: false,
                timer: 1500
              }).then(() => {
                location.reload();
              });
            } else {
              throw new Error('Failed to remove coupon');
            }
          } catch (error) {
            console.error('Error removing coupon:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to remove coupon'
            });
          }
        });
      }
    });
  </script>

  <%- include("../partials/user/footer") %>
</body>
</html> 