<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Add Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <!-- Your custom CSS -->
    <link rel="stylesheet" href="/css/products.css" />
    <title>Products</title>
    
    <style>
        /* Add this to your existing styles */
        .fa-heart.fa-solid {
            color: #e53e3e !important;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-gray-50">
    <%- include("../partials/user/navbar") %>
    <div class="mt-16"></div>

    <!-- Page Content -->
    <div class="bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <h2 class="text-3xl font-bold text-gray-900 mb-8 text-center">Products</h2>

            <div class="flex flex-col md:flex-row gap-8">
                <!-- Left Sidebar - Filters -->
                <div class="md:w-1/4">
                    <div class="sticky top-4 space-y-6 bg-white p-6 rounded-lg shadow-sm">
                        <!-- Sorting Section -->
                        <div class="mb-6">
                            <label for="sortFilter" class="block text-gray-700 font-medium mb-2">Sort By</label>
                            <select id="sortFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                                <option value="default">Default</option>
                                <option value="priceLowToHigh">Price: Low to High</option>
                                <option value="priceHighToLow">Price: High to Low</option>
                                <option value="newArrivals">New Arrivals</option>
                            </select>
                        </div>

                        <!-- Filter Section -->
                        <div class="space-y-4">
                            <div>
                                <label for="category" class="block text-gray-700 font-medium mb-2">Category</label>
                                <select id="category" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                                    <option value="">All</option>
                                    <% if (categories && categories.length > 0) { %>
                                        <% categories.forEach(function(category) { %>
                                            <option value="<%= category._id %>">
                                                <%= category.name %>
                                            </option>
                                        <% }); %>
                                    <% } else { %>
                                        <option value="" disabled>No categories available</option>
                                    <% } %>
                                </select>
                            </div>

                            <div>
                                <label for="type" class="block text-gray-700 font-medium mb-2">Type</label>
                                <select id="type" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                                    <option value="">All</option>
                                    <option value="ruled">Ruled</option>
                                    <option value="unruled">Unruled</option>
                                </select>
                            </div>

                            <div>
                                <label class="block text-gray-700 font-medium mb-2">Price Range</label>
                                <div class="flex gap-2">
                                    <input type="number" id="minPrice" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900" placeholder="Min" />
                                    <input type="number" id="maxPrice" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900" placeholder="Max" />
                                </div>
                            </div>

                            <div>
                                <label for="stockFilter" class="block text-gray-700 font-medium mb-2">Stock Status</label>
                                <select id="stockFilter" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-2 focus:border-gray-900">
                                    <option value="">All Products</option>
                                    <option value="inStock">In Stock</option>
                                    <option value="outOfStock">Out of Stock</option>
                                </select>
                            </div>
                        </div>

                        <!-- Filter and Reset Button -->
                        <div class="mt-6">
                            <button type="button" class="mt-2 px-8 py-2 mr-2 bg-gray-900 text-white rounded-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
                                Filter
                            </button>
                            <button id="resetButton" class="px-4 py-2 bg-gray-900 text-white rounded-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
                                Reset Filters
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Right Side - Product Grid -->
                <div class="md:w-3/4">
                    <!-- Search Bar -->
                    <div class="mb-6 flex-1 relative">
                        <div class="flex items-center">
                            <input type="text" 
                                   id="searchInput" 
                                   class="h-10 flex-grow px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:border-2 focus:border-gray-900" 
                                   placeholder="Search products..." 
                                   autocomplete="off" />
                            <button id="searchButton" 
                                    class="h-10 px-4 py-2 bg-zinc-800 text-white rounded-r-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
                                Search
                            </button>
                            <!-- <button id="refreshButton" 
                                    class="h-10 px-4 py-2 bg-blue-600 text-white rounded-lg ml-2 transform transition-transform duration-300 ease-in-out hover:bg-blue-700 hover:scale-105 active:bg-blue-800 active:scale-95"
                                    title="Refresh product data">
                                <i class="fas fa-sync-alt"></i>
                            </button> -->
                        </div>
                    </div>

                    <!-- Offer Legend
                    <div class="mb-4 p-3 bg-white rounded-lg shadow-sm">
                        <p class="text-sm text-gray-600 mb-2">Offer Types:</p>
                        <div class="flex flex-wrap gap-3">
                            <div class="flex items-center">
                                <span class="inline-block w-3 h-3 bg-red-500 rounded-full mr-1"></span>
                                <span class="text-xs">Product Offer</span>
                            </div>
                            <div class="flex items-center">
                                <span class="inline-block w-3 h-3 bg-blue-500 rounded-full mr-1"></span>
                                <span class="text-xs">Category Offer</span>
                            </div>
                        </div>
                    </div> -->

                    <!-- Product Grid -->
                    <div id="productGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                        <% if (products && products.length > 0) { %>
                            <% products.forEach(function(product) { %>
                                <div class="bg-white rounded-lg shadow-md p-4 flex flex-col">
                                    <!-- Product Image -->
                                    <a href="/product/<%= product._id %>" class="relative">
                                        <img class="w-full h-48 object-cover rounded-lg mb-4" 
                                             src="<%= product.imageUrl %>" 
                                             alt="<%= product.productName %>" />
                                        
                                        <!-- Display primary and secondary offers with different colors based on type -->
                                        <% if (product.variants && product.variants[0] && product.variants[0].offer) { %>
                                            <div class="absolute top-2 right-2 
                                                <%= product.variants[0].offer.offerType === 'Product' ? 'bg-red-500' : 'bg-blue-500' %> 
                                                text-white px-2 py-1 rounded-full text-sm">
                                                <%= product.variants[0].offer.discountPercentage %>% OFF
                                            </div>
                                            
                                            <% if (product.variants[0].secondaryOffer) { %>
                                                <div class="absolute top-10 right-2 
                                                    <%= product.variants[0].secondaryOffer.offerType === 'Product' ? 'bg-red-500' : 'bg-blue-500' %> 
                                                    text-white px-2 py-1 rounded-full text-sm">
                                                    <%= product.variants[0].secondaryOffer.title %>
                                                </div>
                                            <% } %>
                                        <% } %>
                                    </a>

                                    <!-- Product Name -->
                                    <h3 class="text-lg font-semibold text-gray-800 mb-2">
                                        <%= product.productName %>
                                    </h3>

                                    <!-- Price Information -->
                                    <% if (product.variants && product.variants.length > 0) { %>
                                        <% const firstVariant = product.variants[0]; %>
                                        
                                        <!-- Variant Type -->
                                        <p class="text-gray-600 mb-2">
                                            <%= firstVariant.variantType %>
                                        </p>

                                        <!-- Price - Modified to show discounted price -->
                                        <div class="text-xl font-bold text-gray-900 mb-2">
                                            <% if (firstVariant.offer && firstVariant.offer.discountPercentage > 0) { %>
                                                <span class="text-red-600">₹<%= (firstVariant.price - (firstVariant.price * firstVariant.offer.discountPercentage / 100)).toLocaleString() %></span>
                                                <span class="text-gray-400 line-through ml-2">₹<%= firstVariant.price.toLocaleString() %></span>
                                            <% } else { %>
                                                ₹<%= firstVariant.price ? firstVariant.price.toLocaleString() : 'N/A' %>
                                            <% } %>
                                        </div>

                                        <!-- Stock Status -->
                                        <div class="flex justify-between items-center mt-auto">
                                            <a href="javascript:void(0)" 
                                               class="hover:text-slate-500" 
                                               onclick="addToWishlist(event, '<%= product._id %>', '<%= firstVariant._id %>')">
                                                <i class="fa-regular fa-heart"></i>
                                            </a>
                                            <% if (firstVariant.stock > 0) { %>
                                                    <div class="text-green-500">In Stock</div>
                                            <% } else { %>
                                                <div class="text-red-600 bg-red-100 px-2 py-1 rounded">
                                                    Out of Stock
                                                </div>
                                            <% } %>
                                        </div>
                                    <% } else { %>
                                        <div class="text-gray-500 mt-auto">No variants available</div>
                                    <% } %>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="col-span-full text-center text-gray-500">
                                No products found
                            </div>
                        <% } %>
                    </div>

                    <!-- Pagination Controls -->
                    <div id="paginationControls" class="flex justify-center mt-8 space-x-2"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="pt-6"><%- include("../partials/user/footer") %></div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize all DOM element references at the start using the actual IDs in your HTML
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');
            const categorySelect = document.getElementById('category');
            const typeSelect = document.getElementById('type');
            const minPriceInput = document.getElementById('minPrice');
            const maxPriceInput = document.getElementById('maxPrice');
            const stockFilter = document.getElementById('stockFilter');
            const sortFilter = document.getElementById('sortFilter');
            const resetButton = document.getElementById('resetButton');
            const productGrid = document.getElementById('productGrid');
            const paginationControls = document.getElementById('paginationControls');
            
            // Create loading spinner with Tailwind classes instead of Bootstrap
            const loadingSpinner = document.createElement('div');
            loadingSpinner.className = 'col-span-full flex justify-center items-center py-8';
            loadingSpinner.innerHTML = '<div class="animate-spin rounded-full h-10 w-10 border-b-2 border-gray-900"></div><p class="ml-2">Loading products...</p>';
            
            // Set up state
            let currentPage = 1;
            let totalPages = 1;
            let isLoading = false;
            
            // Debounce function for search input
            function debounce(func, wait) {
                let timeout;
                return function() {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), wait);
                };
            }

            // Main function to update products based on filters
            async function updateProducts(page = 1, showLoading = true) {
                try {
                    if (isLoading) return; // Prevent multiple simultaneous requests
                    isLoading = true;
                    currentPage = page;
                    
                    // Show loading spinner
                    if (showLoading) {
                        productGrid.innerHTML = '';
                        productGrid.appendChild(loadingSpinner);
                    }
                    
                    // Construct filters object
                    const filters = new URLSearchParams();
                    
                    // Add all filters
                    filters.append('page', currentPage);
                    
                    // Add search query if exists
                    const searchQuery = searchInput.value.trim();
                    if (searchQuery) {
                        filters.append('query', searchQuery);
                    }
                    
                    // Add category filter
                    const categoryValue = categorySelect.value;
                    if (categoryValue) {
                        filters.append('category', categoryValue);
                    }
                    
                    // Add type filter
                    const typeValue = typeSelect.value;
                    if (typeValue) {
                        filters.append('type', typeValue);
                    }
                    
                    // Add price range filters
                    const minPrice = minPriceInput.value;
                    const maxPrice = maxPriceInput.value;
                    if (minPrice) filters.append('minPrice', minPrice);
                    if (maxPrice) filters.append('maxPrice', maxPrice);
                    
                    // Add stock status filter
                    const stockStatus = stockFilter.value;
                    if (stockStatus) {
                        filters.append('stockStatus', stockStatus);
                    }
                    
                    // Add sort option
                    const sortOption = sortFilter.value;
                    if (sortOption !== 'default') {
                        filters.append('sort', sortOption);
                    }
                    
                    // Update URL with current filters
                    const newUrl = `${window.location.pathname}?${filters.toString()}`;
                    window.history.replaceState({}, '', newUrl);
                    
                    console.log('Fetching with filters:', filters.toString());
                    
                    // Fetch products with constructed filters
                    const response = await fetch(`/products/searchFilter?${filters.toString()}`);
                    
                    if (!response.ok) {
                        throw new Error(`Failed to fetch products: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    console.log('Received data:', data);

                    // Clear the grid
                    productGrid.innerHTML = '';

                    // If no products found
                    if (!data.products || data.products.length === 0) {
                        productGrid.innerHTML = `
                            <div class="col-span-full text-center py-8">
                                <p class="text-lg text-gray-500">No products found matching your criteria</p>
                                <button id="clearFiltersBtn" class="mt-4 px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-700">
                                    Clear Filters
                                </button>
                            </div>
                        `;
                        
                        document.getElementById('clearFiltersBtn')?.addEventListener('click', resetFilters);
                        updatePaginationControls(0);
                        return;
                    }
                    
                    // Update pagination info
                    totalPages = data.totalPages || 1;
                    
                    // Render products with the original Tailwind UI
                    data.products.forEach(product => {
                        // Get first variant if available
                        const hasVariants = product.variants && product.variants.length > 0;
                        const firstVariant = hasVariants ? product.variants[0] : null;
                        
                        // Create product card with Tailwind classes (matching your original design)
                        const productCard = document.createElement('div');
                        productCard.className = 'bg-white rounded-lg shadow-md p-4 flex flex-col transition-transform transform hover:scale-105';
                        
                        // Safe image URL with fallback
                        const imageUrl = product.imageUrl || '/images/default-product.jpg';
                        
                        // Prepare offer badges - show all applicable offers with different colors based on type
                        let offerBadges = '';
                        if (hasVariants && firstVariant.offer) {
                            const primaryBadgeColor = firstVariant.offer.offerType === 'Product' ? 'bg-red-500' : 'bg-blue-500';
                            offerBadges = `
                                <div class="absolute top-2 right-2 ${primaryBadgeColor} text-white px-2 py-1 rounded-full text-sm">
                                    ${firstVariant.offer.discountPercentage}% OFF
                                </div>
                            `;
                            
                            // If there's a second offer title, show it too (already sorted by best discount)
                            if (firstVariant.secondaryOffer) {
                                const secondaryBadgeColor = firstVariant.secondaryOffer.offerType === 'Product' ? 'bg-red-500' : 'bg-blue-500';
                                offerBadges += `
                                    <div class="absolute top-10 right-2 ${secondaryBadgeColor} text-white px-2 py-1 rounded-full text-sm">
                                        ${firstVariant.secondaryOffer.title}
                                    </div>
                                `;
                            }
                        }
                        
                        // Prepare the HTML with proper offer badging
                        let priceHTML = '';
                        if (hasVariants) {
                            if (firstVariant.offer && firstVariant.offer.discountPercentage > 0) {
                                const discountedPrice = Math.round(firstVariant.price - (firstVariant.price * firstVariant.offer.discountPercentage / 100));
                                priceHTML = `
                                    <span class="text-red-600">₹${discountedPrice.toLocaleString()}</span>
                                    <span class="text-gray-400 line-through ml-2">₹${firstVariant.price.toLocaleString()}</span>
                                `;
                            } else {
                                priceHTML = `₹${firstVariant.price ? firstVariant.price.toLocaleString() : 'N/A'}`;
                            }
                        } else {
                            priceHTML = `<span class="text-gray-500">Price not available</span>`;
                        }
                        
                        productCard.innerHTML = `
                            <a href="/product/${product._id}" class="relative">
                                <img class="w-full h-48 object-cover rounded-lg mb-4" 
                                     src="${imageUrl}" 
                                     alt="${product.productName}"
                                     onerror="this.onerror=null; this.src='/images/default-product.jpg';" />
                                
                                ${offerBadges}
                            </a>
                            
                                <h3 class="text-lg font-semibold text-gray-800 mb-2">
                                    ${product.productName}
                                </h3>
                            
                            ${hasVariants ? `
                                <p class="text-gray-600 mb-2">
                                    ${firstVariant.variantType || 'Standard'}
                                </p>
                                
                                <div class="text-xl font-bold text-gray-900 mb-2">
                                    ${priceHTML}
                                            </div>
                                
                                <div class="flex justify-between items-center mt-auto">
                                    <a href="javascript:void(0)" 
                                       class="hover:text-slate-500" 
                                           onclick="addToWishlist(event, '${product._id}', '${firstVariant._id}')">
                                            <i class="fa-regular fa-heart"></i>
                                        </a>
                                    
                                    ${firstVariant.stock > 0 ? `
                                        <div class="flex space-x-2 items-center">
                                                <div class="text-green-500">In Stock</div>
                                                <button onclick="addToCart('${product._id}', '${firstVariant._id}')" 
                                                        class="ml-2 p-2 bg-black text-white rounded-lg hover:bg-gray-800">
                                                    <i class="fas fa-shopping-cart"></i>
                                                </button>
                                    </div>
                                ` : `
                                        <div class="text-red-600 bg-red-100 px-2 py-1 rounded">
                                            Out of Stock
                                        </div>
                                `}
                            </div>
                            ` : `
                                <div class="text-gray-500 mt-auto">No variants available</div>
                            `}
                        `;
                        
                        productGrid.appendChild(productCard);
                    });
                    
                    // Update pagination controls
                    updatePaginationControls(totalPages);
                    
                } catch (error) {
                    console.error('Error fetching products:', error);
                    productGrid.innerHTML = `
                        <div class="col-span-full text-center py-8">
                            <p class="text-lg text-red-500">Error loading products</p>
                            <p class="text-gray-500 mb-4">${error.message}</p>
                            <button id="retryButton" class="px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-700">
                                Retry
                            </button>
                        </div>
                    `;
                    
                    // Add retry button handler
                    document.getElementById('retryButton')?.addEventListener('click', () => updateProducts(currentPage));
                } finally {
                    isLoading = false;
                }
            }
            
            // Update pagination controls using Tailwind classes
            function updatePaginationControls(pages) {
                if (!paginationControls) return;
                
                paginationControls.innerHTML = '';
                if (pages <= 1) return;
                
                // Previous button
                const prevButton = document.createElement('button');
                prevButton.disabled = currentPage === 1;
                prevButton.className = `${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-200'} px-3 py-1 bg-white rounded border border-gray-300`;
                prevButton.innerHTML = '<i class="fas fa-chevron-left"></i>';
                if (currentPage > 1) {
                    prevButton.addEventListener('click', () => changePage(currentPage - 1));
                }
                paginationControls.appendChild(prevButton);
                
                // First page
                addPageButton(1);
                
                // Ellipsis for many pages at the start
                if (currentPage > 3) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-3 py-1 bg-white rounded border border-gray-300';
                    ellipsis.textContent = '...';
                    paginationControls.appendChild(ellipsis);
                }
                
                // Pages around current
                for (let i = Math.max(2, currentPage - 1); i <= Math.min(pages - 1, currentPage + 1); i++) {
                    if (i > 1 && i < pages) {
                        addPageButton(i);
                    }
                }
                
                // Ellipsis for many pages at the end
                if (currentPage < pages - 2) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'px-3 py-1 bg-white rounded border border-gray-300';
                    ellipsis.textContent = '...';
                    paginationControls.appendChild(ellipsis);
                }
                
                // Last page if more than one page
                if (pages > 1) {
                    addPageButton(pages);
                }
                
                // Next button
                const nextButton = document.createElement('button');
                nextButton.disabled = currentPage === pages;
                nextButton.className = `${currentPage === pages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-200'} px-3 py-1 bg-white rounded border border-gray-300`;
                nextButton.innerHTML = '<i class="fas fa-chevron-right"></i>';
                if (currentPage < pages) {
                    nextButton.addEventListener('click', () => changePage(currentPage + 1));
                }
                paginationControls.appendChild(nextButton);
                
                // Helper function to add page button
                function addPageButton(page) {
                    const button = document.createElement('button');
                    button.textContent = page;
                    button.className = currentPage === page 
                        ? 'bg-gray-900 text-white px-3 py-1 rounded border border-gray-300' 
                        : 'bg-white hover:bg-gray-200 px-3 py-1 rounded border border-gray-300';
                    button.addEventListener('click', () => changePage(page));
                    paginationControls.appendChild(button);
                }
            }
            
            // Function to change page
            function changePage(page) {
                if (page < 1 || page > totalPages) return;
                
                // Scroll to top for better UX
                window.scrollTo({ top: 0, behavior: 'smooth' });
                
                // Update products with the new page
                updateProducts(page);
            }
            
            // Make the changePage function global so it can be called from HTML
            window.changePage = changePage;
            
            // Function to reset all filters
            function resetFilters() {
                if (searchInput) searchInput.value = '';
                if (categorySelect) categorySelect.value = '';
                if (typeSelect) typeSelect.value = '';
                if (minPriceInput) minPriceInput.value = '';
                if (maxPriceInput) maxPriceInput.value = '';
                if (stockFilter) stockFilter.value = '';
                if (sortFilter) sortFilter.value = 'default';
                
                // Reset to page 1 and update
                updateProducts(1);
            }
            
            // Initialize event listeners
            // Search input with debounce
            const debouncedSearch = debounce(() => {
                updateProducts(1);
            }, 300);
            
            if (searchInput) {
                searchInput.addEventListener('input', debouncedSearch);
            }
            
            // Search button click
            if (searchButton) {
                searchButton.addEventListener('click', (e) => {
                    e.preventDefault();
                    updateProducts(1);
                });
            }
            
            // Refresh button click
            const refreshButton = document.getElementById('refreshButton');
            if (refreshButton) {
                refreshButton.addEventListener('click', (e) => {
                    e.preventDefault();
                    updateProducts(currentPage, true); // true to show loading spinner
                });
            }
            
            // Category, type, and stock filter changes
            [categorySelect, typeSelect, stockFilter, sortFilter].forEach(element => {
                if (element) {
                    element.addEventListener('change', () => updateProducts(1));
                }
            });
            
            // Price filter changes with debounce
            [minPriceInput, maxPriceInput].forEach(element => {
                if (element) {
                    element.addEventListener('input', debounce(() => updateProducts(1), 500));
                }
            });
            
            // Reset button click
            if (resetButton) {
                resetButton.addEventListener('click', resetFilters);
            }
            
            // Initialize from URL parameters
            function initFromUrlParams() {
                const params = new URLSearchParams(window.location.search);
                
                if (params.has('query') && searchInput) {
                    searchInput.value = params.get('query');
                }
                
                if (params.has('category') && categorySelect) {
                    categorySelect.value = params.get('category');
                }
                
                if (params.has('type') && typeSelect) {
                    typeSelect.value = params.get('type');
                }
                
                if (params.has('minPrice') && minPriceInput) {
                    minPriceInput.value = params.get('minPrice');
                }
                
                if (params.has('maxPrice') && maxPriceInput) {
                    maxPriceInput.value = params.get('maxPrice');
                }
                
                if (params.has('stockStatus') && stockFilter) {
                    stockFilter.value = params.get('stockStatus');
                }
                
                if (params.has('sort') && sortFilter) {
                    sortFilter.value = params.get('sort');
                }
                
                if (params.has('page')) {
                    currentPage = parseInt(params.get('page')) || 1;
                }
            }
            
            // Initialize
            initFromUrlParams();
            updateProducts(currentPage);
            
            // Add page visibility event listener to refresh product data when user returns to page
            document.addEventListener('visibilitychange', function() {
                if (document.visibilityState === 'visible') {
                    // User has returned to the page, refresh data to get latest offers
                    updateProducts(currentPage, false); // false to avoid showing loading spinner on every tab change
                }
            });
        });
        
        // Reuse existing addToWishlist and addToCart functions (already defined in your HTML)
    </script>
</body>
</html>