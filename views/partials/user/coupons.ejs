<!-- Available Coupons Section -->
<div class="space-y-4">
  <div class="flex justify-between items-center">
    <h3 class="text-lg font-semibold text-gray-800">Available Coupons</h3>
    <% if (appliedCoupon) { %>
      <div class="flex items-center space-x-2">
        <span class="text-green-600 font-medium">Applied: <%= appliedCoupon.code %></span>
        <button onclick="removeCoupon()" class="text-red-500 hover:text-red-700">
          <i class="fas fa-times"></i>
        </button>
      </div>
    <% } %>
  </div>
  
  <div id="couponsList" class="space-y-3">
    <!-- Coupons will be populated here -->
  </div>

  <div class="mt-4">
    <div class="flex space-x-2">
      <input type="text" 
             id="couponInput" 
             class="flex-1 px-3 py-2 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" 
             placeholder="Enter coupon code">
      <button onclick="applyCoupon()" 
              class="px-4 py-2 bg-indigo-600 text-white rounded-r-lg hover:bg-indigo-700 transition-colors">
        Apply
      </button>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  fetchAvailableCoupons();
});

async function fetchAvailableCoupons() {
  try {
    const response = await fetch('/coupons/available');
    const coupons = await response.json();
    
    const couponsList = document.getElementById('couponsList');
    
    if (coupons.length === 0) {
      couponsList.innerHTML = `
        <div class="text-center text-gray-500 py-3">
          No coupons available at the moment
        </div>
      `;
      return;
    }
    
    couponsList.innerHTML = coupons.map(coupon => `
      <div class="bg-white border rounded-lg p-3 transform transition-all duration-300 hover:scale-[1.02] hover:shadow-md">
        <div class="flex justify-between items-start">
          <div>
            <div class="flex items-center space-x-2">
              <span class="text-indigo-600 font-mono font-bold">${coupon.code}</span>
              <button onclick="copyCouponCode('${coupon.code}')" 
                      class="text-gray-400 hover:text-indigo-600">
                <i class="fas fa-copy"></i>
              </button>
            </div>
            <p class="text-sm text-gray-600 mt-1">${coupon.description}</p>
          </div>
          <div class="text-right">
            <span class="text-lg font-bold text-indigo-600">
              ${coupon.discountType === 'percentage' ? coupon.discountAmount + '%' : '₹' + coupon.discountAmount}
            </span>
            <p class="text-xs text-gray-500">OFF</p>
          </div>
        </div>
        <div class="mt-2 text-xs text-gray-500">
          <p>Min. Purchase: ₹${coupon.minPurchase}</p>
          ${coupon.maxDiscount ? `<p>Max Discount: ₹${coupon.maxDiscount}</p>` : ''}
          <p>Valid until: ${new Date(coupon.validUntil).toLocaleDateString()}</p>
        </div>
        <button onclick="applyCouponCode('${coupon.code}')" 
                class="mt-2 w-full py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors text-sm">
          Apply Coupon
        </button>
      </div>
    `).join('');
    
  } catch (error) {
    console.error('Error fetching coupons:', error);
  }
}

async function applyCouponCode(code) {
  try {
    const response = await fetch('/cart/apply-coupon', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ couponCode: code })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      // Update the order summary with new totals
      updateOrderSummary(result.discount);
      
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Coupon applied successfully',
        timer: 2000,
        showConfirmButton: false
      });
      
      // Refresh the coupons list to show the applied coupon
      fetchAvailableCoupons();
    } else {
      throw new Error(result.error);
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message
    });
  }
}

async function removeCoupon() {
  try {
    const response = await fetch('/cart/remove-coupon', {
      method: 'POST'
    });
    
    if (response.ok) {
      const result = await response.json();
      updateOrderSummary(0); // Reset discount to 0
      
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Coupon removed successfully',
        timer: 2000,
        showConfirmButton: false
      });
      
      // Refresh the coupons list
      fetchAvailableCoupons();
    } else {
      throw new Error('Failed to remove coupon');
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message
    });
  }
}

async function applyCoupon() {
  const code = document.getElementById('couponInput').value.trim();
  if (!code) {
    Swal.fire({
      icon: 'warning',
      title: 'Oops...',
      text: 'Please enter a coupon code'
    });
    return;
  }
  await applyCouponCode(code);
}

function copyCouponCode(code) {
  navigator.clipboard.writeText(code).then(() => {
    Swal.fire({
      icon: 'success',
      title: 'Copied!',
      text: 'Coupon code copied to clipboard',
      timer: 1500,
      showConfirmButton: false
    });
  });
}

function updateOrderSummary(discount) {
  // Get the elements
  const subtotalElement = document.getElementById('subtotal');
  const shippingElement = document.getElementById('shipping');
  const discountElement = document.getElementById('discount');
  const totalElement = document.getElementById('total');
  
  // Get the current values
  const subtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
  const shipping = parseFloat(shippingElement.textContent.replace('₹', ''));
  
  // Update the discount
  if (discount > 0) {
    if (!discountElement.parentElement) {
      const discountDiv = document.createElement('div');
      discountDiv.className = 'flex justify-between text-green-600';
      discountDiv.innerHTML = `
        <p>Discount</p>
        <p id="discount">-₹${discount.toFixed(2)}</p>
      `;
      shippingElement.parentElement.after(discountDiv);
    } else {
      discountElement.textContent = `-₹${discount.toFixed(2)}`;
    }
  } else if (discountElement.parentElement) {
    discountElement.parentElement.remove();
  }
  
  // Calculate and update the total
  const total = subtotal + shipping - discount;
  totalElement.textContent = `₹${total.toFixed(2)}`;
}
</script> 