<%- include('../partials/admin/header') %>
<%- include('../partials/admin/sidebar') %>

<div class="ml-64 p-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold text-white">Offers</h1>
    <div class="flex space-x-4">
      <a href="/admin/offer/archived" class="bg-gray-600 text-white px-4 py-2 rounded-md">
        View Archived Offers
      </a>
      <button onclick="openAddOfferModal()" class="bg-blue-600 text-white px-4 py-2 rounded-md">
        Add New Offer
      </button>
    </div>
  </div>

  <!-- Offers Table -->
  <div class="bg-zinc-800 rounded-lg shadow overflow-hidden">
    <table class="min-w-full divide-y divide-gray-700">
      <thead class="bg-zinc-900">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Title</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Type</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Discount</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Valid Until</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Status</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Actions</th>
        </tr>
      </thead>
      <tbody class="divide-y divide-gray-700">
        <% offers.forEach(offer => { %>
          <tr>
            <td class="px-6 py-4 whitespace-nowrap text-white"><%= offer.title %></td>
            <td class="px-6 py-4 whitespace-nowrap text-white"><%= offer.offerType %></td>
            <td class="px-6 py-4 whitespace-nowrap text-white"><%= offer.discountPercentage %>%</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">
              <%= new Date(offer.endDate).toLocaleDateString() %>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="<%= offer.isActive ? 'text-green-500' : 'text-red-500' %>">
                <%= offer.isActive ? 'Active' : 'Inactive' %>
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <button 
                class="text-blue-500 hover:text-blue-700 mr-3 edit-offer-btn"
                data-id="<%= offer._id %>"
                data-title="<%= offer.title %>"
                data-type="<%= offer.offerType %>"
                data-discount="<%= offer.discountPercentage %>"
                data-start="<%= offer.startDate.toISOString().split('T')[0] %>"
                data-end="<%= offer.endDate.toISOString().split('T')[0] %>"
                data-product="<%= offer.applicableProduct ? offer.applicableProduct._id : '' %>"
                data-category="<%= offer.applicableCategory ? offer.applicableCategory._id : '' %>"
              >
                Edit
              </button>
              <button onclick="deleteOffer('<%= offer._id %>')" class="text-red-500 hover:text-red-700">
                Delete
              </button>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>
</div>

<!-- Add Offer Modal -->
<div id="addOfferModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center overflow-y-auto py-10">
  <div class="bg-zinc-800 rounded-lg p-8 max-w-md w-full max-h-[90vh]">
    <h2 class="text-xl font-bold text-white mb-4">Add New Offer</h2>
    <form id="addOfferForm" onsubmit="return false" class="overflow-y-auto max-h-[calc(90vh-8rem)]">
      <div class="space-y-4">
        <div>
          <label class="block text-gray-300 mb-1">Title</label>
          <input type="text" name="title" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>

        <div>
          <label class="block text-gray-300 mb-1">Offer Type</label>
          <select name="offerType" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2" onchange="toggleApplicableFields()">
            <option value="Product">Product</option>
            <option value="Category">Category</option>
          </select>
        </div>

        <div id="productField">
          <label class="block text-gray-300 mb-1">Applicable Product</label>
          <div class="relative">
            <button 
              type="button" 
              class="w-full rounded-md bg-zinc-700 text-white px-3 py-2 text-left"
              onclick="toggleProductDropdown()"
            >
              Select Product
            </button>
            <div 
              id="productDropdown" 
              class="hidden absolute z-10 w-full mt-1 bg-zinc-700 rounded-md shadow-lg max-h-60 overflow-y-auto"
            >
              <% products.forEach(product => { %>
                <div 
                  class="px-4 py-2 text-white hover:bg-zinc-600 cursor-pointer"
                  onclick="selectProduct('<%= product._id %>', '<%= product.productName %>')"
                >
                  <%= product.productName %>
                </div>
              <% }); %>
            </div>
            <input type="hidden" name="applicableProduct" id="selectedProductId">
          </div>
        </div>

        <div id="categoryField" class="hidden">
          <label class="block text-gray-300 mb-1">Category</label>
          <select name="applicableCategory" class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
            <option value="">Select Category</option>
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
            <% }); %>
          </select>
        </div>

        <div>
          <label class="block text-gray-300 mb-1">Discount Percentage</label>
          <input type="number" name="discountPercentage" min="0" max="100" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>

        <div>
          <label class="block text-gray-300 mb-1">Start Date</label>
          <input type="date" name="startDate" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>

        <div>
          <label class="block text-gray-300 mb-1">End Date</label>
          <input type="date" name="endDate" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>
      </div>

      <div class="flex justify-end mt-6 space-x-3">
        <button type="button" onclick="closeAddOfferModal()" class="px-4 py-2 text-gray-300 hover:text-white">
          Cancel
        </button>
        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
          Add Offer
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Edit Offer Modal -->
<div id="editOfferModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center overflow-y-auto py-10">
  <div class="bg-zinc-800 rounded-lg p-8 max-w-md w-full max-h-[90vh]">
    <h2 class="text-xl font-bold text-white mb-4">Edit Offer</h2>
    <form id="editOfferForm" onsubmit="return false" class="overflow-y-auto max-h-[calc(90vh-8rem)]">
      <input type="hidden" name="offerId" id="editOfferId">
      <div class="space-y-4">
        <div>
          <label class="block text-gray-300 mb-1">Title</label>
          <input type="text" name="title" id="editTitle" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>

        <div>
          <label class="block text-gray-300 mb-1">Offer Type</label>
          <select name="offerType" id="editOfferType" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2" onchange="toggleEditApplicableFields()">
            <option value="Product">Product</option>
            <option value="Category">Category</option>
          </select>
        </div>

        <div>
          <label class="block text-gray-300 mb-1">Discount Percentage</label>
          <input type="number" name="discountPercentage" id="editDiscountPercentage" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>

        <div>
          <label class="block text-gray-300 mb-1">Start Date</label>
          <input type="date" name="startDate" id="editStartDate" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>

        <div>
          <label class="block text-gray-300 mb-1">End Date</label>
          <input type="date" name="endDate" id="editEndDate" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>

        <div id="editProductField" class="hidden">
          <label class="block text-gray-300 mb-1">Applicable Product</label>
          <div class="relative">
            <button 
              type="button" 
              class="w-full rounded-md bg-zinc-700 text-white px-3 py-2 text-left"
              onclick="toggleEditProductDropdown()"
              id="editProductButton"
            >
              Select Product
            </button>
            <div 
              id="editProductDropdown" 
              class="hidden absolute z-10 w-full mt-1 bg-zinc-700 rounded-md shadow-lg max-h-60 overflow-y-auto"
            >
              <% products.forEach(product => { %>
                <div 
                  class="px-4 py-2 text-white hover:bg-zinc-600 cursor-pointer"
                  onclick="selectEditProduct('<%= product._id %>', '<%= product.productName %>')"
                >
                  <%= product.productName %>
                </div>
              <% }); %>
            </div>
            <input type="hidden" name="applicableProduct" id="editSelectedProductId">
          </div>
        </div>

        <div id="editCategoryField" class="hidden">
          <label class="block text-gray-300 mb-1">Applicable Category</label>
          <select name="applicableCategory" id="editApplicableCategory" class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
            <option value="">Select Category</option>
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
            <% }); %>
          </select>
        </div>
      </div>

      <div class="flex justify-end mt-6 space-x-3">
        <button type="button" onclick="closeEditOfferModal()" class="px-4 py-2 text-gray-300 hover:text-white">
          Cancel
        </button>
        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
          Update Offer
        </button>
      </div>
    </form>
  </div>
</div>

<script>
function openAddOfferModal() {
  document.getElementById('addOfferModal').classList.remove('hidden');
}

function closeAddOfferModal() {
  document.getElementById('addOfferModal').classList.add('hidden');
}

function toggleApplicableFields() {
  const offerType = document.querySelector('select[name="offerType"]').value;
  const productField = document.getElementById('productField');
  const categoryField = document.getElementById('categoryField');

  if (offerType === 'Product') {
    productField.classList.remove('hidden');
    categoryField.classList.add('hidden');
  } else {
    productField.classList.add('hidden');
    categoryField.classList.remove('hidden');
  }
}

function deleteOffer(offerId) {
  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/admin/offer/${offerId}`, {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(result => {
        if (result.success) {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Offer moved to archived offers',
            timer: 2000,
            showConfirmButton: false,
            background: '#1a1a1a',
            color: '#fff',
            customClass: {
              popup: 'bg-zinc-800 text-white'
            }
          }).then(() => {
            window.location.href = '/admin/offer/archived';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.error || 'Failed to delete offer',
            background: '#1a1a1a',
            color: '#fff',
            customClass: {
              popup: 'bg-zinc-800 text-white'
            }
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An unexpected error occurred',
          background: '#1a1a1a',
          color: '#fff',
          customClass: {
            popup: 'bg-zinc-800 text-white'
          }
        });
      });
    }
  });
}

function editOffer(id, title, type, discount, start, end, product, category) {
  document.getElementById('editOfferId').value = id;
  document.getElementById('editTitle').value = title;
  document.getElementById('editOfferType').value = type;
  document.getElementById('editDiscountPercentage').value = discount;
  document.getElementById('editStartDate').value = start;
  document.getElementById('editEndDate').value = end;
  
  // Set product/category based on offer type
  if (type === 'Product') {
    document.getElementById('editSelectedProductId').value = product || '';
    // Find and set the product name
    const productName = Array.from(document.querySelectorAll('#editProductDropdown div'))
      .find(div => div.getAttribute('onclick').includes(`'${product}'`))
      ?.textContent.trim() || 'Select Product';
    document.getElementById('editProductButton').textContent = productName;
    document.getElementById('editProductField').classList.remove('hidden');
    document.getElementById('editCategoryField').classList.add('hidden');
  } else {
    document.getElementById('editApplicableCategory').value = category || '';
    document.getElementById('editProductField').classList.add('hidden');
    document.getElementById('editCategoryField').classList.remove('hidden');
  }
  
  document.getElementById('editOfferModal').classList.remove('hidden');
}

function closeEditOfferModal() {
  document.getElementById('editOfferModal').classList.add('hidden');
}

function toggleEditApplicableFields() {
  const offerType = document.getElementById('editOfferType').value;
  const productField = document.getElementById('editProductField');
  const categoryField = document.getElementById('editCategoryField');

  if (offerType === 'Product') {
    productField.classList.remove('hidden');
    categoryField.classList.add('hidden');
  } else {
    productField.classList.add('hidden');
    categoryField.classList.remove('hidden');
  }
}

function toggleProductDropdown() {
  const dropdown = document.getElementById('productDropdown');
  dropdown.classList.toggle('hidden');
}

function selectProduct(id, name) {
  document.getElementById('selectedProductId').value = id;
  document.querySelector('#productField button').textContent = name;
  document.getElementById('productDropdown').classList.add('hidden');
}

function toggleEditProductDropdown() {
  const dropdown = document.getElementById('editProductDropdown');
  dropdown.classList.toggle('hidden');
}

function selectEditProduct(id, name) {
  document.getElementById('editSelectedProductId').value = id;
  document.getElementById('editProductButton').textContent = name;
  document.getElementById('editProductDropdown').classList.add('hidden');
}

// Form submission handling
document.getElementById('addOfferForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  // Disable submit button
  const submitButton = e.target.querySelector('button[type="submit"]');
  submitButton.disabled = true;
  
  const formData = new FormData(e.target);
  const data = Object.fromEntries(formData);

  // Convert numeric values
  data.discountPercentage = parseFloat(data.discountPercentage);

  try {
    const response = await fetch('/admin/offer', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    const result = await response.json();

    if (response.ok) {
      // Show success message
      await Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: result.message || 'Offer added successfully',
        timer: 2000,
        showConfirmButton: false,
        background: '#1a1a1a',
        color: '#fff',
        customClass: {
          popup: 'bg-zinc-800 text-white'
        }
      });
      
      // Close modal and refresh page
      document.getElementById('addOfferModal').classList.add('hidden');
      window.location.reload();
    } else {
      // Show error message
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.error || 'Failed to add offer',
        background: '#1a1a1a',
        color: '#fff',
        customClass: {
          popup: 'bg-zinc-800 text-white'
        }
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An unexpected error occurred',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
  } finally {
    submitButton.disabled = false;
  }
});

// Edit form submission handler
document.getElementById('editOfferForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const data = Object.fromEntries(formData);
  const offerId = data.offerId;

  // Convert numeric values
  data.discountPercentage = parseFloat(data.discountPercentage);

  try {
    const response = await fetch(`/admin/offer/${offerId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });

    const result = await response.json();

    if (response.ok) {
      await Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: result.message || 'Offer updated successfully',
        timer: 2000,
        showConfirmButton: false,
        background: '#1a1a1a',
        color: '#fff',
        customClass: {
          popup: 'bg-zinc-800 text-white'
        }
      });
      
      // Close modal and refresh page
      document.getElementById('editOfferModal').classList.add('hidden');
      window.location.reload();
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.error || 'Failed to update offer',
        background: '#1a1a1a',
        color: '#fff',
        customClass: {
          popup: 'bg-zinc-800 text-white'
        }
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An unexpected error occurred',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
  }
});

// Add this to your script section
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.edit-offer-btn').forEach(button => {
    button.addEventListener('click', function() {
      const id = this.dataset.id;
      const title = this.dataset.title;
      const type = this.dataset.type;
      const discount = this.dataset.discount;
      const start = this.dataset.start;
      const end = this.dataset.end;
      const product = this.dataset.product;
      const category = this.dataset.category;
      
      editOffer(id, title, type, discount, start, end, product, category);
    });
  });
});
</script>

<%- include('../partials/admin/footer') %>

