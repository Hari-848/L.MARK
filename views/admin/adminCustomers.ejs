<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
  <body class="bg-black text-white min-h-screen">
    <!-- Sidebar -->
    <%- include("../partials/admin/sidebar") %>

    <!-- Main Content -->
    <main class="ml-64 p-8">
      <!-- Header -->
      <header class="flex items-center justify-between mb-8">
        <h1 class="text-2xl font-semibold text-gray-200">Customers</h1>
      </header>

      <!-- Add this search bar above the customer table -->
      <div class="mb-6 flex-1 relative">
        <div class="flex items-center">
          <input type="text" 
                 id="searchInput" 
                 class="h-10 flex-grow px-4 py-2 bg-zinc-900 border border-zinc-700 rounded-l-lg focus:outline-none focus:border-violet-500" 
                 placeholder="Search customers..." 
                 autocomplete="off" />
          <button id="searchButton" 
                  class="h-10 px-4 py-2 bg-zinc-800 text-white rounded-r-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
            Search
          </button>
        </div>
      </div>

      <!-- Customer Table -->
      <div class="bg-zinc-800 rounded-lg p-6">
        <table class="min-w-full text-left text-gray-400">
          <thead>
            <tr class="border-b border-gray-700">
              <th class="py-3 px-4">S.No</th>
              <th class="py-3 px-4">Name</th>
              <th class="py-3 px-4">Email</th>
              <th class="py-3 px-4">Status</th>
              <th class="py-3 px-4">Action</th>
            </tr>
          </thead>
          <tbody>
            <% customers.forEach((customer, index) => { %>
            <tr class="border-b border-gray-700">
              <td class="py-3 px-4 text-white">
                <%= (currentPage - 1) * 12 + index + 1 %>
              </td>
              <td class="py-3 px-4 text-white"><%= customer.fullName %></td>
              <td class="py-3 px-4 text-white"><%= customer.email %></td>
              <td
                id="statusText-<%= customer._id %>"
                class="py-3 px-4 <%= customer.status === 'blocked' ? 'text-red-500' : 'text-white' %>"
              >
                <%= customer.status %>
              </td>
              <td class="py-3 px-4">
                <button
                  id="statusButton-<%= customer._id %>"
                  class="px-3 py-1 rounded text-white <%= customer.status === 'blocked' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600' %>"
                  onclick="toggleStatus('<%= customer._id %>', '<%= customer.status %>')"
                >
                  <%= customer.status === 'blocked' ? 'Unblock' : 'Block' %>
                </button>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>

        <!-- Pagination -->
        <div class="flex justify-center space-x-2 mt-4">
          <% if (currentPage > 1) { %>
          <a
            href="/admin/customers?page=<%= currentPage - 1 %>"
            class="bg-gray-700 text-white px-3 py-1 rounded hover:bg-gray-600"
            >Previous</a
          >
          <% } %>
          <% for (let i = 1; i <= totalPages; i++) { %>
          <a
            href="/admin/customers?page=<%= i %>"
            class="bg-gray-700 text-white px-3 py-1 rounded hover:bg-gray-600"
            ><%= i %></a
          >
          <% } %>
          <% if (currentPage < totalPages) { %>
          <a
            href="/admin/customers?page=<%= currentPage + 1 %>"
            class="bg-gray-700 text-white px-3 py-1 rounded hover:bg-gray-600"
            >Next</a
          >
          <% } %>
        </div>
      </div>
    </main>

    <script>
      function toggleStatus(customerId, currentStatus) {
        const action = currentStatus === 'blocked' ? 'unblock' : 'block';
        
        // Show SweetAlert confirmation
        Swal.fire({
          title: `Are you sure?`,
          text: `Do you want to ${action} this user?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: `Yes, ${action} user!`,
          background: '#1a1a1a', // Dark theme
          color: '#fff',
          customClass: {
            popup: 'bg-zinc-800 text-white',
            confirmButton: currentStatus === 'blocked' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600',
            cancelButton: 'bg-gray-500 hover:bg-gray-600'
          }
        }).then((result) => {
          if (result.isConfirmed) {
            const newStatus = currentStatus === 'blocked' ? 'active' : 'blocked';

            fetch(`/admin/customers/updateStatus/${customerId}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ status: newStatus }),
            })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                // Show success message
                Swal.fire({
                  title: 'Success!',
                  text: `User has been ${action}ed!`,
                  icon: 'success',
                  background: '#1a1a1a',
                  color: '#fff',
                  customClass: {
                    popup: 'bg-zinc-800 text-white'
                  }
                });

                // Update the button
                const button = document.getElementById(`statusButton-${customerId}`);
                if (newStatus === 'blocked') {
                  button.textContent = "Unblock";
                  button.classList.remove('bg-red-500', 'hover:bg-red-600');
                  button.classList.add('bg-green-500', 'hover:bg-green-600');
                } else {
                  button.textContent = "Block";
                  button.classList.remove('bg-green-500', 'hover:bg-green-600');
                  button.classList.add('bg-red-500', 'hover:bg-red-600');
                }
                button.setAttribute("onclick", `toggleStatus('${customerId}', '${newStatus}')`);

                // Update the status text
                const statusText = document.getElementById(`statusText-${customerId}`);
                statusText.textContent = newStatus;
                statusText.className = `py-3 px-4 ${newStatus === 'blocked' ? 'text-red-500' : 'text-white'}`;
              } else {
                throw new Error(data.error || 'Failed to update status');
              }
            })
            .catch((error) => {
              // Show error message
              Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error',
                background: '#1a1a1a',
                color: '#fff',
                customClass: {
                  popup: 'bg-zinc-800 text-white'
                }
              });
            });
          }
        });
      }

      const searchInput = document.getElementById('searchInput');
      const searchButton = document.getElementById('searchButton');
      let debounceTimer;

      // Function to perform search
      function performSearch() {
        const searchTerm = searchInput.value.trim();
        if (searchTerm) {
          const currentUrl = new URL(window.location.href);
          currentUrl.searchParams.set('search', searchTerm);
          currentUrl.searchParams.set('page', '1');
          window.location.href = currentUrl.toString();
        }
      }

      // Debounced search for input typing
      function debouncedSearch(e) {
        clearTimeout(debounceTimer);
        const searchTerm = e.target.value.trim();

        // If search is cleared, reset the page
        if (!searchTerm) {
          const currentUrl = new URL(window.location.href);
          currentUrl.searchParams.delete('search');
          window.location.href = currentUrl.toString();
          return;
        }

        // Wait for 1 second after typing stops before searching
        debounceTimer = setTimeout(() => {
          performSearch();
        }, 1000); // 1 second debounce
      }

      // Handle automatic search on input with debounce
      searchInput.addEventListener('input', debouncedSearch);

      // Handle immediate search on button click
      searchButton.addEventListener('click', () => {
        clearTimeout(debounceTimer); // Clear any pending debounced search
        performSearch();
      });

      // Handle Enter key press
      searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          clearTimeout(debounceTimer); // Clear any pending debounced search
          performSearch();
        }
      });

      // Initialize search input with existing search term
      document.addEventListener('DOMContentLoaded', () => {
        const searchTerm = new URLSearchParams(window.location.search).get('search');
        if (searchTerm) {
          searchInput.value = searchTerm;
        }
      });
    </script>
  </body>
</html>
