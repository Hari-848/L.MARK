<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Category</title>

  <%- include("../partials/admin/headerHTML") %>

</head>





<body class="bg-black text-white min-h-screen">
  <!-- Sidebar -->
  <%- include("../partials/admin/sidebar") %>

    <main class="ml-64 p-8">
      <!-- Add this search bar above the category table -->
      <div class="mb-6 flex-1 relative">
        <div class="flex items-center">
          <input type="text" 
                 id="searchInput" 
                 class="h-10 flex-grow px-4 py-2 bg-zinc-900 border border-zinc-700 rounded-l-lg focus:outline-none focus:border-violet-500" 
                 placeholder="Search categories..." 
                 autocomplete="off" />
          <button id="searchButton" 
                  class="h-10 px-4 py-2 bg-zinc-800 text-white rounded-r-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
            Search
          </button>
        </div>
      </div>

      <!-- Customer Table -->
      <div class="bg-zinc-800 rounded-lg p-6">
        <table class="min-w-full text-left text-gray-400">
          <header class="flex items-center justify-between mb-4">
            <h1 class="text-2xl font-semibold text-gray-200">Main Category</h1>
          </header>
          <thead>
            <tr class="border-b border-gray-700">
              <th class="py-3 px-4">S.No</th>
              <th class="py-3 px-4">Main Category</th>
              <th class="py-3 px-4">Action</th>
            </tr>
          </thead>
          <tbody>
            <% categories.forEach((category, index)=> { %>
              <tr class="border-b border-gray-700">
                <td class="py-3 px-4 text-white">
                  <%= (currentPage - 1) * 3 + index + 1 %>
                </td>
                <td class="py-3 px-4 text-white"><a href="/admin/subCategory?mainCategoryId=<%= category._id %>">
                    <%= category.name %>
                  </a></td>
                <td class="px-4 py-2">
                  <button class="bg-green-500 text-white px-3 py-1 rounded-lg hover:bg-green-600"
                    onclick="openEditModal('<%= category._id %>', '<%= category.name %>')">Edit</button>
                  <button class="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600"
                    onclick="deleteCategory('<%= category._id %>')">Delete</button>
                </td>

                <!-- Edit Category Modal -->
                <div id="editCategoryModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
                  <div class="bg-zinc-500 bg-opacity-50 absolute inset-0"></div>
                  <div class="bg-black text-white rounded-lg shadow-xl relative z-10 p-6 w-1/3">
                    <h2 class="text-xl font-semibold mb-4">Edit Category</h2>
                    <form id="editCategoryForm" method="POST" onsubmit="return validateEditForm(event)">
                      <div class="mb-4">
                        <label for="editCategoryName" class="block text-gray-300">Category Name</label>
                        <input type="text" 
                               id="editCategoryName" 
                               name="categoriesName"
                               class="bg-zinc-900 w-full px-4 py-2 border rounded-lg" 
                               required>
                      </div>
                      <div class="flex justify-end space-x-4">
                        <button type="button" 
                                onclick="closeEditModal()"
                                class="px-4 py-2 bg-gray-700 text-white rounded-lg">Cancel</button>
                        <button type="submit" 
                                class="px-4 py-2 bg-green-500 text-white rounded-lg">Update</button>
                      </div>
                    </form>
                  </div>
                </div>


              </tr>
              <% }); %>
          </tbody>
        </table>

        <div class="flex items-center justify-between mt-6 mb-2">

          <!-- Add Category Button -->
          <button onclick="openModal()"
            class="bg-transparent border border-white text-white px-4 py-2 rounded-lg hover:bg-gray-700">
            Add Category
          </button>

          <!-- Modal Structure -->
          <div id="addCategoryModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
            <div class="bg-zinc-500 bg-opacity-50 absolute inset-0"></div>
            <div class="bg-black text-white rounded-lg shadow-xl relative z-10 p-6 w-1/3">
              <h2 class="text-xl font-semibold mb-4">Add New Category</h2>
              <form id="addCategoryForm" method="POST" action="/admin/category/add" onsubmit="return validateForm(event)">
                <div class="mb-4">
                  <label for="categoryName" class="block text-gray-300">Category Name</label>
                  <input type="text" id="categoryName" name="categoriesName"
                    class="bg-zinc-900 w-full px-4 py-2 border rounded-lg" required>
                </div>
                <div class="flex justify-end space-x-4">
                  <button type="button" onclick="closeModal()"
                    class="px-4 py-2 bg-gray-700 text-white rounded-lg">Cancel</button>
                  <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-lg">Add</button>
                </div>
              </form>
            </div>
          </div>


        </div>
        <!-- Pagination -->
        <div class="flex justify-center items-center space-x-4 mt-6">
          <% if (currentPage> 1) { %>
            <a href="/admin/category?page=<%= currentPage - 1 %>" class="px-4 py-2 bg-gray-700 rounded-lg">Previous</a>
            <% } %>
              <% for (let i=1; i <=totalPages; i++) { %>
                <a href="/admin/category?page=<%= i %>" class="px-3 py-1 bg-gray-600 rounded-lg">
                  <%= i %>
                </a>
                <% } %>
                  <% if (currentPage < totalPages) { %>
                    <a href="/admin/category?page=<%= currentPage + 1 %>"
                      class="px-4 py-2 bg-gray-700 rounded-lg">Next</a>
                    <% } %>
        </div>
      </div>
    </main>

    <% if (typeof error !=='undefined' && error) { %>
      <script>
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: "<%= error %>",
          confirmButtonText: 'OK'
        });
      </script>
      <% } %>


        <script>
          function openModal() {
            document.getElementById('addCategoryModal').classList.remove('hidden');
          }

          function closeModal() {
            document.getElementById('addCategoryModal').classList.add('hidden');
          }


          function openEditModal(id, name) {
            const form = document.getElementById('editCategoryForm');
            form.action = `/admin/category/update/${id}`;
            document.getElementById('editCategoryName').value = name;
            document.getElementById('editCategoryModal').classList.remove('hidden');
          }

          function closeEditModal() {
            document.getElementById('editCategoryModal').classList.add('hidden');
          }

          function deleteCategory(id) {
            // Show a SweetAlert confirmation dialog
            Swal.fire({
              title: 'Are you sure?',
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: 'Yes, delete it!',
              cancelButtonText: 'Cancel'
            }).then((result) => {
              if (result.isConfirmed) {
                // Proceed with the delete request if confirmed
                fetch('/admin/category/delete/' + id, {
                  method: 'POST'
                }).then(() => {
                  // Reload the page after successful deletion
                  window.location.reload();
                }).catch(err => {
                  // Show error if deletion fails
                  Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: "Error deleting category",
                    confirmButtonText: 'OK'
                  });
                });
              }
            });
          }

          function validateForm(event) {
            event.preventDefault();
            const categoryName = document.getElementById('categoryName').value.trim();
            
            if (!categoryName) {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Category name cannot be empty',
                confirmButtonText: 'OK'
              });
              return false;
            }

            // Submit the form using fetch
            fetch('/admin/category/add', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
              },
              body: `categoriesName=${encodeURIComponent(categoryName)}`
            })
            .then(response => {
              // Check if the response is JSON
              const contentType = response.headers.get('content-type');
              if (contentType && contentType.includes('application/json')) {
                return response.json();
              }
              return response.text().then(text => {
                throw new Error(text);
              });
            })
            .then(data => {
              if (data.error) {
                throw new Error(data.error);
              }
              // Success
              Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Category added successfully',
                confirmButtonText: 'OK'
              }).then(() => {
                window.location.reload();
              });
            })
            .catch(error => {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to add category',
                confirmButtonText: 'OK' 
              });
            });

            return false;
          }

          function validateEditForm(event) {
            event.preventDefault();
            const categoryName = document.getElementById('editCategoryName').value.trim();
            const form = event.target;
            
            if (!categoryName) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Category name cannot be empty',
                    confirmButtonText: 'OK'
                });
                return false;
            }

            // Submit form using fetch
            fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `categoriesName=${encodeURIComponent(categoryName)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                // Success
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Category updated successfully',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.reload();
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update category',
                    confirmButtonText: 'OK'
                });
            });

            return false;
          }

          // Fix the button onclick handler
          document.querySelectorAll('button[onclick^="openEditModal"]').forEach(button => {
            const onclick = button.getAttribute('onclick');
            const matches = onclick.match(/openEditModal\('([^']+)', '([^']+)'\)/);
            if (matches) {
                const [_, id, name] = matches;
                button.onclick = () => openEditModal(id, name);
            }
          });

        </script>

        <script>
          const searchInput = document.getElementById('searchInput');
          const searchButton = document.getElementById('searchButton');
          let debounceTimer;

          // Function to perform search
          function performSearch() {
            const searchTerm = searchInput.value.trim();
            if (searchTerm) {
              const currentUrl = new URL(window.location.href);
              currentUrl.searchParams.set('search', searchTerm);
              currentUrl.searchParams.set('page', '1');
              window.location.href = currentUrl.toString();
            }
          }

          // Debounced search for input typing
          function debouncedSearch(e) {
            clearTimeout(debounceTimer);
            const searchTerm = e.target.value.trim();

            // If search is cleared, reset the page
            if (!searchTerm) {
              const currentUrl = new URL(window.location.href);
              currentUrl.searchParams.delete('search');
              window.location.href = currentUrl.toString();
              return;
            }

            // Wait for 1 second after typing stops before searching
            debounceTimer = setTimeout(() => {
              performSearch();
            }, 1000); // 1 second debounce
          }

          // Handle automatic search on input with debounce
          searchInput.addEventListener('input', debouncedSearch);

          // Handle immediate search on button click
          searchButton.addEventListener('click', () => {
            clearTimeout(debounceTimer); // Clear any pending debounced search
            performSearch();
          });

          // Handle Enter key press
          searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              e.preventDefault();
              clearTimeout(debounceTimer); // Clear any pending debounced search
              performSearch();
            }
          });

          // Initialize search input with existing search term
          document.addEventListener('DOMContentLoaded', () => {
            const searchTerm = new URLSearchParams(window.location.search).get('search');
            if (searchTerm) {
              searchInput.value = searchTerm;
            }
          });
        </script>

</body>

</html>