<%- include('../partials/admin/header') %>
<%- include('../partials/admin/sidebar') %>

<div class="ml-64 p-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold text-white">Sales Report</h1>
    <div class="flex space-x-4">
      <button onclick="generateReport('daily')" class="bg-blue-600 text-white px-4 py-2 rounded-md">
        Daily Report
      </button>
      <button onclick="generateReport('weekly')" class="bg-blue-600 text-white px-4 py-2 rounded-md">
        Weekly Report
      </button>
      <button onclick="generateReport('yearly')" class="bg-blue-600 text-white px-4 py-2 rounded-md">
        Yearly Report
      </button>
      <button onclick="openCustomDateModal()" class="bg-blue-600 text-white px-4 py-2 rounded-md">
        Custom Date Range
      </button>
    </div>
  </div>

  <!-- Report Summary -->
  <div id="reportSummary" class="hidden bg-zinc-800 rounded-lg p-6 mb-6">
    <h2 class="text-xl font-bold text-white mb-4">Report Summary</h2>
    <div class="mb-4">
      <p class="text-gray-300">Date Range: <span id="dateRange" class="text-white"></span></p>
    </div>
    <div class="grid grid-cols-3 gap-4">
      <div class="bg-zinc-700 p-4 rounded-lg">
        <h3 class="text-gray-300 mb-2">Total Orders</h3>
        <p class="text-2xl font-bold text-white" id="totalOrders">0</p>
      </div>
      <div class="bg-zinc-700 p-4 rounded-lg">
        <h3 class="text-gray-300 mb-2">Total Sales</h3>
        <p class="text-2xl font-bold text-white" id="totalSales">₹0</p>
      </div>
      <div class="bg-zinc-700 p-4 rounded-lg">
        <h3 class="text-gray-300 mb-2">Total Discounts</h3>
        <p class="text-2xl font-bold text-white" id="totalDiscounts">₹0</p>
      </div>
    </div>
  </div>

  <!-- Order Details Table -->
  <div id="orderDetails" class="hidden bg-zinc-800 rounded-lg shadow overflow-hidden">
    <table class="min-w-full divide-y divide-gray-700">
      <thead class="bg-zinc-900">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Order ID</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Date</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">User</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Total</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Discount</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Net Amount</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Payment Method</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Status</th>
          <!-- <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Coupon Code</th> -->
        </tr>
      </thead>
      <tbody class="divide-y divide-gray-700" id="orderDetailsBody">
        <!-- Order details will be populated here -->
      </tbody>
    </table>
    
    <!-- Pagination Controls -->
    <div id="pagination" class="hidden px-6 py-4 bg-zinc-900">
      <div class="flex flex-col items-center">
        <span class="text-sm text-gray-400 mb-2">
          Showing page <span id="currentPage">1</span> of <span id="totalPages">1</span>
        </span>
        <div class="flex justify-center space-x-2">
          <button id="firstPage" class="bg-zinc-700 text-white px-3 py-1 rounded hover:bg-zinc-600 disabled:opacity-50 disabled:cursor-not-allowed">
            <i class="fas fa-angle-double-left"></i>
          </button>
          <button id="prevPage" class="bg-zinc-700 text-white px-3 py-1 rounded hover:bg-zinc-600 disabled:opacity-50 disabled:cursor-not-allowed">
            <i class="fas fa-angle-left"></i>
          </button>
          <div id="pageNumbers" class="flex space-x-2">
            <!-- Page numbers will be populated here -->
          </div>
          <button id="nextPage" class="bg-zinc-700 text-white px-3 py-1 rounded hover:bg-zinc-600 disabled:opacity-50 disabled:cursor-not-allowed">
            <i class="fas fa-angle-right"></i>
          </button>
          <button id="lastPage" class="bg-zinc-700 text-white px-3 py-1 rounded hover:bg-zinc-600 disabled:opacity-50 disabled:cursor-not-allowed">
            <i class="fas fa-angle-double-right"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Download Options -->
  <div id="downloadOptions" class="hidden flex justify-end mt-6 space-x-4">
    <button onclick="downloadReport('pdf')" class="bg-red-600 text-white px-4 py-2 rounded-md">
      Download PDF
    </button>
    <button onclick="downloadReport('excel')" class="bg-green-600 text-white px-4 py-2 rounded-md">
      Download Excel
    </button>
  </div>
</div>

<!-- Custom Date Range Modal -->
<div id="customDateModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
  <div class="bg-zinc-800 rounded-lg p-8 max-w-md w-full">
    <h2 class="text-xl font-bold text-white mb-4">Custom Date Range</h2>
    <form id="customDateForm" onsubmit="return false">
      <div class="space-y-4">
        <div>
          <label class="block text-gray-300 mb-1">Start Date</label>
          <input type="date" name="startDate" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>
        <div>
          <label class="block text-gray-300 mb-1">End Date</label>
          <input type="date" name="endDate" required class="w-full rounded-md bg-zinc-700 text-white px-3 py-2">
        </div>
      </div>
      <div class="flex justify-end mt-6 space-x-3">
        <button type="button" onclick="closeCustomDateModal()" class="px-4 py-2 text-gray-300 hover:text-white">
          Cancel
        </button>
        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
          Generate Report
        </button>
      </div>
    </form>
  </div>
</div>

<script>
let currentReportType = 'daily';
let currentStartDate = null;
let currentEndDate = null;

document.addEventListener('DOMContentLoaded', function() {
  // Load today's report when page loads
  generateReport('daily', 1);
});

function generateReport(type, page = 1) {
  let url = '/admin/api/sales-report';
  const params = new URLSearchParams();
  
  currentReportType = type;

  if (type === 'custom') {
    if (!currentStartDate || !currentEndDate) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Please select both start and end dates',
        background: '#1a1a1a',
        color: '#fff',
        customClass: {
          popup: 'bg-zinc-800 text-white'
        }
      });
      return;
    }
    params.append('startDate', currentStartDate);
    params.append('endDate', currentEndDate);
  } else {
    params.append('type', type);
  }

  params.append('page', page);
  url += `?${params.toString()}`;

  // Show loading state
  document.getElementById('reportSummary').classList.add('hidden');
  document.getElementById('orderDetails').classList.add('hidden');
  document.getElementById('downloadOptions').classList.add('hidden');
  document.getElementById('pagination').classList.add('hidden');

  // Show loading indicator
  Swal.fire({
    title: 'Generating Report',
    text: 'Please wait...',
    allowOutsideClick: false,
    allowEscapeKey: false,
    allowEnterKey: false,
    showConfirmButton: false,
    background: '#1a1a1a',
    color: '#fff',
    customClass: {
      popup: 'bg-zinc-800 text-white'
    }
  });

  fetch(url, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    credentials: 'include'
  })
  .then(response => {
    if (!response.ok) {
      return response.json().then(errorData => {
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      });
    }
    return response.json();
  })
  .then(data => {
    if (!data) {
      throw new Error('No data received from server');
    }
    Swal.close();
    displayReport(data);
    setupPagination(data.pagination);
  })
  .catch(error => {
    console.error('Detailed error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Failed to generate report. Please try again.',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
  });
}

function setupPagination(pagination) {
  if (!pagination) return;

  const { currentPage, totalPages, hasNextPage, hasPrevPage } = pagination;
  
  // Update page info
  document.getElementById('currentPage').textContent = currentPage;
  document.getElementById('totalPages').textContent = totalPages;
  
  // Enable/disable navigation buttons
  document.getElementById('firstPage').disabled = currentPage === 1;
  document.getElementById('prevPage').disabled = !hasPrevPage;
  document.getElementById('nextPage').disabled = !hasNextPage;
  document.getElementById('lastPage').disabled = currentPage === totalPages;
  
  // Generate page numbers
  const pageNumbers = document.getElementById('pageNumbers');
  pageNumbers.innerHTML = '';
  
  let startPage = Math.max(1, currentPage - 2);
  let endPage = Math.min(totalPages, startPage + 4);
  
  if (endPage - startPage < 4) {
    startPage = Math.max(1, endPage - 4);
  }
  
  // Add ellipsis if needed
  if (startPage > 1) {
    pageNumbers.appendChild(createPageButton('...', false, null));
  }
  
  // Add page numbers
  for (let i = startPage; i <= endPage; i++) {
    pageNumbers.appendChild(createPageButton(i, currentPage === i, i));
  }
  
  // Add ellipsis if needed
  if (endPage < totalPages) {
    pageNumbers.appendChild(createPageButton('...', false, null));
  }
  
  // Show pagination controls
  document.getElementById('pagination').classList.remove('hidden');
  
  // Add event listeners
  document.getElementById('firstPage').onclick = () => {
    if (currentPage > 1) {
      generateReport(currentReportType, 1);
    }
  };
  document.getElementById('prevPage').onclick = () => {
    if (currentPage > 1) {
      generateReport(currentReportType, currentPage - 1);
    }
  };
  document.getElementById('nextPage').onclick = () => {
    if (currentPage < totalPages) {
      generateReport(currentReportType, currentPage + 1);
    }
  };
  document.getElementById('lastPage').onclick = () => {
    if (currentPage < totalPages) {
      generateReport(currentReportType, totalPages);
    }
  };
}

function createPageButton(text, isActive, pageNum) {
  const button = document.createElement('button');
  button.textContent = text;
  button.className = `px-3 py-1 rounded ${
    isActive ? 'bg-violet-700 text-white' : 'bg-zinc-700 text-white hover:bg-zinc-600'
  }`;
  
  if (pageNum !== null) {
    button.onclick = () => generateReport(currentReportType, pageNum);
  } else {
    button.disabled = true;
  }
  
  return button;
}

function openCustomDateModal() {
  document.getElementById('customDateModal').classList.remove('hidden');
}

function closeCustomDateModal() {
  document.getElementById('customDateModal').classList.add('hidden');
}

function displayReport(data) {
  if (!data) {
    console.error('No data received to display');
    return;
  }

  try {
    // Update summary
    const totalOrdersElement = document.getElementById('totalOrders');
    const totalSalesElement = document.getElementById('totalSales');
    const totalDiscountsElement = document.getElementById('totalDiscounts');
    const dateRangeElement = document.getElementById('dateRange');

    if (totalOrdersElement) totalOrdersElement.textContent = data.totalOrders || 0;
    if (totalSalesElement) totalSalesElement.textContent = formatCurrency(data.totalSales || 0);
    if (totalDiscountsElement) totalDiscountsElement.textContent = formatCurrency(data.totalDiscounts || 0);
    if (dateRangeElement && data.dateRange) {
      dateRangeElement.textContent = 
        `${formatDate(data.dateRange.start)} to ${formatDate(data.dateRange.end)}`;
    }

    // Update order details table
    const tbody = document.getElementById('orderDetailsBody');
    if (tbody) {
      tbody.innerHTML = '';
      
      if (data.orderDetails && Array.isArray(data.orderDetails) && data.orderDetails.length > 0) {
        data.orderDetails.forEach(order => {
          if (!order) return;
          
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-white">${order.orderId || ''}</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">${formatDate(order.date)}</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">${order.userEmail || 'N/A'}</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">${formatCurrency(order.total || 0)}</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">${formatCurrency(order.discount || 0)}</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">${formatCurrency(order.netAmount || 0)}</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">${order.paymentMethod || 'N/A'}</td>
            <td class="px-6 py-4 whitespace-nowrap text-white">
              <span class="px-2 py-1 rounded-full text-xs ${
                order.status === 'delivered' ? 'bg-green-500' :
                order.status === 'shipped' ? 'bg-blue-500' :
                order.status === 'processing' ? 'bg-yellow-500' : 'bg-gray-500'
              }">
                ${order.status || 'N/A'}
              </span>
            </td>
            <!-- <td class="px-6 py-4 whitespace-nowrap text-white">${order.couponCode || 'N/A'}</td> -->
          `;
          tbody.appendChild(row);
        });
      } else {
        // Show a message when there are no orders
        const row = document.createElement('tr');
        row.innerHTML = `
          <td colspan="9" class="px-6 py-4 text-center text-white">
            No orders found for the selected date range
          </td>
        `;
        tbody.appendChild(row);
      }
    }

    // Show sections
    const reportSummary = document.getElementById('reportSummary');
    const orderDetails = document.getElementById('orderDetails');
    const downloadOptions = document.getElementById('downloadOptions');

    if (reportSummary) reportSummary.classList.remove('hidden');
    if (orderDetails) orderDetails.classList.remove('hidden');
    if (downloadOptions) downloadOptions.classList.remove('hidden');
  } catch (error) {
    console.error('Error displaying report:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to display report data',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
  }
}

async function downloadReport(format) {
  try {
    let url = `/admin/sales-report/download-${format}?`;
    const params = new URLSearchParams();

    if (currentReportType === 'custom') {
      if (!currentStartDate || !currentEndDate) {
        throw new Error('Please select both start and end dates for custom range');
      }
      params.append('startDate', currentStartDate);
      params.append('endDate', currentEndDate);
    } else {
      params.append('type', currentReportType);
    }

    url += params.toString();
    console.log('Download URL:', url);
    window.location.href = url;
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Failed to download report',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
  }
}

function formatCurrency(amount) {
  return new Intl.NumberFormat('en-IN', {
    style: 'currency',
    currency: 'INR'
  }).format(amount);
}

function formatDate(date) {
  return new Date(date).toLocaleDateString('en-IN');
}

function getDateRange(type) {
  const now = new Date();
  let start, end;

  switch (type) {
    case 'daily':
      start = new Date(now);
      start.setHours(0, 0, 0, 0);
      end = new Date(now);
      end.setHours(23, 59, 59, 999);
      break;
    case 'weekly':
      start = new Date(now);
      start.setDate(now.getDate() - now.getDay());
      start.setHours(0, 0, 0, 0);
      end = new Date(start);
      end.setDate(start.getDate() + 6);
      end.setHours(23, 59, 59, 999);
      break;
    case 'yearly':
      start = new Date(now.getFullYear(), 0, 1);
      end = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999);
      break;
    default:
      start = new Date(now);
      start.setHours(0, 0, 0, 0);
      end = new Date(now);
      end.setHours(23, 59, 59, 999);
  }

  return { start, end };
}

// Handle custom date form submission
document.getElementById('customDateForm').addEventListener('submit', (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const startDate = formData.get('startDate');
  const endDate = formData.get('endDate');
  
  if (!startDate || !endDate) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Please select both start and end dates',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
    return;
  }

  // Validate dates
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const selectedStartDate = new Date(startDate);
  const selectedEndDate = new Date(endDate);

  // Reset time components to ensure accurate date comparison
  selectedStartDate.setHours(0, 0, 0, 0);
  selectedEndDate.setHours(0, 0, 0, 0);

  if (selectedStartDate > today || selectedEndDate > today) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Future dates cannot be selected. Please select dates up to today.',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
    return;
  }

  if (selectedStartDate > selectedEndDate) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Start date cannot be after end date. Please select a valid date range.',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
    return;
  }

  // Set the current report type to custom
  currentReportType = 'custom';
  currentStartDate = startDate;
  currentEndDate = endDate;

  // Generate report with custom dates
  generateReport('custom', 1);
  closeCustomDateModal();
});

// Add input validation for date fields
document.querySelector('input[name="startDate"]').addEventListener('change', function() {
  const startDate = new Date(this.value);
  const endDateInput = document.querySelector('input[name="endDate"]');
  const endDate = new Date(endDateInput.value);

  if (endDateInput.value && startDate > endDate) {
    Swal.fire({
      icon: 'warning',
      title: 'Invalid Date Range',
      text: 'Start date cannot be after end date. Please adjust your selection.',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
    this.value = ''; // Clear the invalid start date
  }
});

document.querySelector('input[name="endDate"]').addEventListener('change', function() {
  const endDate = new Date(this.value);
  const startDateInput = document.querySelector('input[name="startDate"]');
  const startDate = new Date(startDateInput.value);

  if (startDateInput.value && startDate > endDate) {
    Swal.fire({
      icon: 'warning',
      title: 'Invalid Date Range',
      text: 'End date cannot be before start date. Please adjust your selection.',
      background: '#1a1a1a',
      color: '#fff',
      customClass: {
        popup: 'bg-zinc-800 text-white'
      }
    });
    this.value = ''; // Clear the invalid end date
  }
});
</script>

<%- include('../partials/admin/footer') %> 